/*----- PROTECTED REGION ID(TeledynePIStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TeledynePIStateMachine.cpp
//
// description : State machine file for the TeledynePI class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <TeledynePI.h>

/*----- PROTECTED REGION END -----*/	//	TeledynePI::TeledynePIStateMachine.cpp

//================================================================
//  States   |  Description
//================================================================
//  FAULT    |  
//  INIT     |  
//  RUNNING  |  
//  STANDBY  |  


namespace TeledynePI_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_temperature_allowed()
 *	Description : Execution allowed for temperature attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_temperature_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::temperatureStateAllowed_READ) ENABLED START -----*/		
			if ( get_state()==Tango::FAULT && is_device_initialized() )
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::temperatureStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_temperatureTarget_allowed()
 *	Description : Execution allowed for temperatureTarget attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_temperatureTarget_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::RUNNING)
		{
		/*----- PROTECTED REGION ID(TeledynePI::temperatureTargetStateAllowed_WRITE) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::temperatureTargetStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::temperatureTargetStateAllowed_READ) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::temperatureTargetStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_gain_allowed()
 *	Description : Execution allowed for gain attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_gain_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::RUNNING)
		{
		/*----- PROTECTED REGION ID(TeledynePI::gainStateAllowed_WRITE) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::gainStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::gainStateAllowed_READ) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::gainStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_adcRate_allowed()
 *	Description : Execution allowed for adcRate attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_adcRate_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::RUNNING)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcRateStateAllowed_WRITE) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcRateStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcRateStateAllowed_READ) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcRateStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_adcQuality_allowed()
 *	Description : Execution allowed for adcQuality attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_adcQuality_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::RUNNING)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcQualityStateAllowed_WRITE) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcQualityStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcQualityStateAllowed_READ) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcQualityStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : TeledynePI::is_adcPixelBitDepth_allowed()
 *	Description : Execution allowed for adcQuality attribute
 */
//--------------------------------------------------------
bool TeledynePI::is_adcPixelBitDepth_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Check access type.
	if ( type!=Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for WRITE 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT ||
			get_state()==Tango::RUNNING)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcPixelBitDepthStateAllowed_WRITE) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcPixelBitDepthStateAllowed_WRITE
			return false;
		}
		return true;
	}
	else

	//	Check access type.
	if ( type==Tango::READ_REQ )
	{
		//	Compare device state with not allowed states for READ 
		if (get_state()==Tango::FAULT ||
			get_state()==Tango::INIT)
		{
		/*----- PROTECTED REGION ID(TeledynePI::adcPixelBitDepthStateAllowed_READ) ENABLED START -----*/
			if (get_state() == Tango::FAULT && is_device_initialized())
			{
				return true;
			}
		/*----- PROTECTED REGION END -----*/	//	TeledynePI::adcPixelBitDepthStateAllowed_READ
			return false;
		}
		return true;
	}
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================


/*----- PROTECTED REGION ID(TeledynePI::TeledynePIStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	TeledynePI::TeledynePIStateAllowed.AdditionalMethods

}	//	End of namespace
