//=============================================================================
//
// file :        Xspress3.h
//
// description : Include for the Xspress3 class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _XSPRESS3_H
#define _XSPRESS3_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------

#include "Factory.h"
#include <tango.h>

// Yat4Tango
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/DynamicInterfaceManager.h>
#include <yat4tango/InnerAppender.h>

// Yat
#include <yat/memory/SharedPtr.h>
#include <yat/utils/Callback.h>
#include <yat/any/Any.h>

#include "UserData.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "lima/CtVideo.h"
#include "Factory.h"

using namespace lima;
using namespace std;
using namespace yat4tango;

#include <Xspress3Interface.h>
#include <Xspress3Camera.h>

#define MAX_ATTRIBUTE_STRING_LENGTH     256
using namespace lima;

namespace Xspress3_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::INIT :
*  Tango::RUNNING :
 */


class Xspress3: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevString	*attr_revision_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	The base IP Adress of the xspress3
 */
	string	baseIPAdress;
/**
 *	The base MAC address of the xspress3
 */
	string	baseMacAddress;
/**
 *	The base port of the xspress3
 */
	Tango::DevLong	basePort;
/**
 *	
 */
	Tango::DevLong	cardIndex;
/**
 *	
 */
	string	directoryName;
/**
 *	
 */
	Tango::DevLong	maxFrames;
/**
 *	
 */
	Tango::DevLong	nbCards;
/**
 *	
 */
	Tango::DevLong	nbChans;
/**
 *	
 */
	Tango::DevBoolean	noUDP;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Xspress3(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Xspress3(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Xspress3(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~Xspress3() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Xspress3 methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for revision acquisition result.
 */
	virtual void read_revision(Tango::Attribute &attr);
/**
 *	Read/Write allowed for revision attribute.
 */
	virtual bool is_revision_allowed(Tango::AttReqType type);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	
	Tango::DevState dev_state();


protected :	
	//	Add your own data members here
	//-----------------------------------------
    long long get_last_image_counter(void);

	///generic method to create a tango dynamic attribute
    template <class F1, class F2>
    void create_attribute(	std::string name,
							int data_type,
							Tango::AttrDataFormat data_format,
							Tango::AttrWriteType access_type,
                            Tango::DispLevel disp_level,
							const std::string& unit,
							const std::string& format,
							const std::string& desc,
							F1 read_callback,
							F2 write_callback,
                            yat::Any user_data,
                            unsigned int max_dim_x = 0, //used ONLY for Tango::SPECTRUM or Tango::IMAGE
                            unsigned int max_dim_y = 0  //used ONLY for Tango::SPECTRUM or Tango::IMAGE
                          ); //put any user data attached to this attribute
					
    
    /// 
    void init_dyn_attributes();
    
    /// callback methods for tango dyn attributes - NULL
    void read_callback_null(yat4tango::DynamicAttributeReadCallbackData& cbd){/*nop*/}
	
    /// callback methods for tango dyn attributes - NULL
    void write_callback_null(yat4tango::DynamicAttributeWriteCallbackData& cbd){/*nop*/}		
	
    /// callback methods for common tango dyn attributes - statistics attributes
    void read_stat_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);
    
    /// callback methods for common tango dyn attributes - channels attributes
    void read_channel_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);    

    //dynamic attributes objects        
    yat4tango::DynamicInterfaceManager m_dim;
    std::vector<DoubleUserData*>    m_dyn_total_count;
    std::vector<DoubleUserData*>    m_dyn_total_processed_count;    
    std::vector<DoubleUserData*> 	m_dyn_icr;
    std::vector<DoubleUserData*> 	m_dyn_ocr;            
    std::vector<DoubleUserData*> 	m_dyn_deadtime;
    std::vector<DoubleUserData*> 	m_dyn_pileup;    
    std::vector<DoubleUserData*> 	m_dyn_realtime;    
    std::vector<ChannelUserData*> 	m_dyn_channel;
    
    bool         m_is_device_initialized ;
    std::stringstream   m_status_message;

    //LIMA objects
    lima::Xspress3::Interface* m_hw;
    lima::CtControl*           m_ct;
    lima::Xspress3::Camera*    m_camera;        
};

}	// namespace_ns

///////////////////////////////////////////////////////////////////////////////
//// INCLUDE TEMPLATE IMPLEMENTAION
///////////////////////////////////////////////////////////////////////////////    
#include "Xspress3.hpp"

#endif	// _XSPRESS3_H
