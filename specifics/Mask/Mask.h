//=============================================================================
//
// file :        Mask.h
//
// description : Include for the Mask class.
//
// project :	Lima
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _MASK_H
#define _MASK_H


//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

//	Add your own constant definitions here.
//-----------------------------------------------
#include "Factory.h"
#include <tango.h>
#include <yat4tango/DynamicInterfaceManager.h>
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>
#include <yat/threading/Mutex.h>
#include <yat/utils/XString.h>

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "lima/CtVideo.h"
#include "lima/SoftOpId.h"
#include "lima/SoftOpExternalMgr.h"
#include "processlib/Data.h"
#include "processlib/TaskMgr.h"
#include <map>


#define MAX_ATTRIBUTE_STRING_LENGTH     256
#define MASK_CURRENT_VERSION                 "1.0.0"


namespace Mask_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class Mask : public TANGO_BASE_CLASS
{
public:
    //	Add your own data members here
    //-----------------------------------------


    //	Here is the Start of the automatic code generation part
    //-------------------------------------------------------------	
    /**
     *	@name attributes
     *	Attribute member data.
     */
    //@{
		Tango::DevString	*attr_version_read;
		Tango::DevULong	attr_runLevel_write;
		Tango::DevString	*attr_operationsList_read;
		Tango::DevShort	*attr_maskImage_read;
		Tango::DevShort	attr_maskImage_write;
//@}

    /**
     * @name Device properties
     * Device properties member data.
     */
    //@{
/**
 *	Memorize/Define the runLevel attribute<br>
 */
	Tango::DevULong	memorizedRunLevel;
//@}

    /**
     *	@name Device properties
     *	Device property member data.
     */
    //@{
    //@}

    /**@name Constructors
     * Miscellaneous constructors */
    //@{
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device Name
     */
    Mask(Tango::DeviceClass *cl, string &s);
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device Name
     */
    Mask(Tango::DeviceClass *cl, const char *s);
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device name
     *	@param d	Device description.
     */
    Mask(Tango::DeviceClass *cl, const char *s, const char *d);
    //@}

    /**@name Destructor
     * Only one destructor is defined for this class */
    //@{
    /**
     * The object destructor.
     */
    ~Mask()
    {
        delete_device();
    };
    /**
     *	will be called at device destruction or at init command.
     */
    void delete_device();
    //@}


    /**@name Miscellaneous methods */
    //@{
    /**
     *	Initialize the device
     */
    virtual void init_device();
    /**
     *	Always executed method before execution command method.
     */
    virtual void always_executed_hook();

//@}

/**
 * @name Mask methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for version acquisition result.
 */
	virtual void read_version(Tango::Attribute &attr);
/**
 *	Extract real attribute values for runLevel acquisition result.
 */
	virtual void read_runLevel(Tango::Attribute &attr);
/**
 *	Write runLevel attribute values to hardware.
 */
	virtual void write_runLevel(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for operationsList acquisition result.
 */
	virtual void read_operationsList(Tango::Attribute &attr);
/**
 *	Extract real attribute values for maskImage acquisition result.
 */
	virtual void read_maskImage(Tango::Attribute &attr);
/**
 *	Write maskImage attribute values to hardware.
 */
	virtual void write_maskImage(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for version attribute.
 */
	virtual bool is_version_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for runLevel attribute.
 */
	virtual bool is_runLevel_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for operationsList attribute.
 */
	virtual bool is_operationsList_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for maskImage attribute.
 */
	virtual bool is_maskImage_allowed(Tango::AttReqType type);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

    //	Here is the end of the automatic code generation part
    //-------------------------------------------------------------	
    bool is_device_initialized()
    {
        return m_is_device_initialized;
    };

    ///methode to create the Data image needed by processlib Mask task
    template <typename OUTPUT>    
    Data create_data_from_mask( Tango::DevShort* mask_image,    //mask image
                                long mask_dim_x,                //dim_x of the mask
                                long mask_dim_y,                //dim_y of the mask
                                Data::TYPE data_type,      //type of the object Data to create (Data::INT8 Data::UINT8 Data::INT16 ...)
                                long data_depth);               //number of bytes occupied by the Data::TYPE (1->Data::INT8 2->Data::INT16 ...)
    
    void set_mask_image(void);
protected:
    //	Add your own data members here
    //-----------------------------------------
    bool            m_is_device_initialized;
    stringstream    m_status_message;

    //LIMA objects
    lima::CtControl*            m_ct;
    lima::SoftOpInstance        m_soft_operation;
    long                        m_dim_x;
    long                        m_dim_y;
    std::vector<std::string >   m_operations_list;
} ;

}	// namespace_ns


///////////////////////////////////////////////////////////////////////////////
//// INCLUDE TEMPLATE IMPLEMENTAION
///////////////////////////////////////////////////////////////////////////////    
#include "Mask.hpp"

#endif // _MASK_H
