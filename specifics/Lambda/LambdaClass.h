/*----- PROTECTED REGION ID(LambdaClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        LambdaClass.h
//
// description : Include for the Lambda root class.
//               This class is the singleton class for
//                the Lambda device class.
//               It contains all properties and methods which the 
//               Lambda requires only once e.g. the commands.
//
// project :     XSpectrum Lambda detector TANGO specific device.
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef LambdaClass_H
#define LambdaClass_H

#include <tango.h>
#include <Lambda.h>


/*----- PROTECTED REGION END -----*/	//	LambdaClass.h


namespace Lambda_ns
{
/*----- PROTECTED REGION ID(LambdaClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	LambdaClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute configFile class definition
class configFileAttrib: public Tango::Attr
{
public:
	configFileAttrib():Attr("configFile",
			Tango::DEV_STRING, Tango::READ) {};
	~configFileAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_configFile(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_configFile_allowed(ty);}
};

//	Attribute distortionCorrection class definition
class distortionCorrectionAttrib: public Tango::Attr
{
public:
	distortionCorrectionAttrib():Attr("distortionCorrection",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~distortionCorrectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_distortionCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_distortionCorrection_allowed(ty);}
};

//	Attribute libraryVersion class definition
class libraryVersionAttrib: public Tango::Attr
{
public:
	libraryVersionAttrib():Attr("libraryVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~libraryVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_libraryVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_libraryVersion_allowed(ty);}
};

//	Attribute highVoltage class definition
class highVoltageAttrib: public Tango::Attr
{
public:
	highVoltageAttrib():Attr("highVoltage",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~highVoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_highVoltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_highVoltage_allowed(ty);}
};

//	Attribute humidity class definition
class humidityAttrib: public Tango::Attr
{
public:
	humidityAttrib():Attr("humidity",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~humidityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_humidity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_humidity_allowed(ty);}
};

//	Attribute temperature class definition
class temperatureAttrib: public Tango::Attr
{
public:
	temperatureAttrib():Attr("temperature",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~temperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_temperature_allowed(ty);}
};

//	Attribute linearityCorrection class definition
class linearityCorrectionAttrib: public Tango::Attr
{
public:
	linearityCorrectionAttrib():Attr("linearityCorrection",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~linearityCorrectionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_linearityCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_linearityCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_linearityCorrection_allowed(ty);}
};

//	Attribute saturationFlag class definition
class saturationFlagAttrib: public Tango::Attr
{
public:
	saturationFlagAttrib():Attr("saturationFlag",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~saturationFlagAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_saturationFlag(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_saturationFlag(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_saturationFlag_allowed(ty);}
};

//	Attribute saturationThreshold class definition
class saturationThresholdAttrib: public Tango::Attr
{
public:
	saturationThresholdAttrib():Attr("saturationThreshold",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~saturationThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_saturationThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_saturationThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_saturationThreshold_allowed(ty);}
};

//	Attribute chargeSumming class definition
class chargeSummingAttrib: public Tango::Attr
{
public:
	chargeSummingAttrib():Attr("chargeSumming",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~chargeSummingAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_chargeSumming(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_chargeSumming_allowed(ty);}
};

//	Attribute lowerThreshold class definition
class lowerThresholdAttrib: public Tango::Attr
{
public:
	lowerThresholdAttrib():Attr("lowerThreshold",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~lowerThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_lowerThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_lowerThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_lowerThreshold_allowed(ty);}
};

//	Attribute upperThreshold class definition
class upperThresholdAttrib: public Tango::Attr
{
public:
	upperThresholdAttrib():Attr("upperThreshold",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~upperThresholdAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_upperThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_upperThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_upperThreshold_allowed(ty);}
};

//	Attribute hwAccumulation class definition
class hwAccumulationAttrib: public Tango::Attr
{
public:
	hwAccumulationAttrib():Attr("hwAccumulation",
			Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~hwAccumulationAttrib() {};
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_hwAccumulation(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_hwAccumulation_allowed(ty);}
};

//	Attribute exposureAccuTime class definition
class exposureAccuTimeAttrib: public Tango::Attr
{
public:
	exposureAccuTimeAttrib():Attr("exposureAccuTime",
			Tango::DEV_DOUBLE, Tango::WRITE) {};
	~exposureAccuTimeAttrib() {};
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_exposureAccuTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_exposureAccuTime_allowed(ty);}
};

//	Attribute hwAcquisitionMode class definition
class hwAcquisitionModeAttrib: public Tango::Attr
{
public:
	hwAcquisitionModeAttrib():Attr("hwAcquisitionMode",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~hwAcquisitionModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<Lambda *>(dev))->read_hwAcquisitionMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<Lambda *>(dev))->write_hwAcquisitionMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<Lambda *>(dev))->is_hwAcquisitionMode_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(hwAcquisitionModeEnum) == in_type;}
	virtual string get_enum_type() {return string("hwAcquisitionModeEnum");}
};
  
/**
 *	The LambdaClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  LambdaClass : public Tango::DeviceClass
#else
class LambdaClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(LambdaClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LambdaClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static LambdaClass *init(const char *);
		static LambdaClass *instance();
		~LambdaClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		LambdaClass(string &);
		static LambdaClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	Lambda_H
