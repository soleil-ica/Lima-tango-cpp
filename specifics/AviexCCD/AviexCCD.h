//=============================================================================
//
// file :        AviexCCD.h
//
// description : Include for the AviexCCD class.
//
// project :	Device specific for Princeton CCD detector
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//         BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//          This file is generated by POGO
//    (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _AVIEXCCD_H
#define _AVIEXCCD_H


//using namespace Tango;

/**
 * @author    $Author:  $
 * @version    $Revision:  $
 */

 //    Add your own constant definitions here.
 //-----------------------------------------------
#include "tango.h"
#include "Factory.h"

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"

#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>

#include <AviexInterface.h>
#include <AviexCamera.h>

#define MAX_ATTRIBUTE_STRING_LENGTH     256

const int MASK_CORRECTION_BIT_POSITION	= 0;
const int BIAS_CORRECTION_BIT_POSITION	= 1;
const int DARK_CORRECTION_BIT_POSITION	= 2;
const int FLOOD_CORRECTION_BIT_POSITION	= 3;
const int GEOM_CORRECTION_BIT_POSITION	= 12;

#define SET(var, bit) ( var|=  (1 << bit)  )       /* positionne le bit numero 'bit' -> 1 dans une variable*/
#define CLR(var, bit) ( var&= ~(1 << bit)  )       /* positionne le bit numero 'bit' -> 0 dans une variable*/
#define GET(var, bit) ((var&   (1 << bit))?1:0 )   /* retourne la valeur du bit numero 'bit' dans une variable*/


using namespace lima;
using namespace std;
using namespace yat4tango;

namespace AviexCCD_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class AviexCCD: public Tango::Device_4Impl
{
public :
    //    Add your own data members here
    //-----------------------------------------


    //    Here is the Start of the automatic code generation part
    //-------------------------------------------------------------    
/**
 *    @name attributes
 *    Attribute member data.
 */
//@{
		Tango::DevString	*attr_mxLibraryVersion_read;
		Tango::DevString	*attr_internalAcquisitionMode_read;
		Tango::DevString	attr_internalAcquisitionMode_write;
		Tango::DevDouble	*attr_initialDelayTime_read;
		Tango::DevDouble	attr_initialDelayTime_write;
		Tango::DevDouble	*attr_readoutDelayTime_read;
		Tango::DevDouble	attr_readoutDelayTime_write;
		Tango::DevDouble	*attr_exposureMultiplier_read;
		Tango::DevDouble	attr_exposureMultiplier_write;
		Tango::DevDouble	*attr_gapMultiplier_read;
		Tango::DevDouble	attr_gapMultiplier_write;
		Tango::DevBoolean	*attr_maskCorrection_read;
		Tango::DevBoolean	attr_maskCorrection_write;
		Tango::DevBoolean	*attr_biasCorrection_read;
		Tango::DevBoolean	attr_biasCorrection_write;
		Tango::DevBoolean	*attr_darkCorrection_read;
		Tango::DevBoolean	attr_darkCorrection_write;
		Tango::DevBoolean	*attr_floodCorrection_read;
		Tango::DevBoolean	attr_floodCorrection_write;
		Tango::DevBoolean	*attr_geomCorrection_read;
		Tango::DevBoolean	attr_geomCorrection_write;
		Tango::DevBoolean	*attr_highSpeed_read;
		Tango::DevBoolean	attr_highSpeed_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Detector Name.
 */
	string	detectorID;
/**
 *	The path & the Name of the Mx database file .<br>
 *	
 */
	string	mxDatabaseFileFullName;
/**
 *	Memorize/Define the internalAcquisitionMode attribute at Init device<br>
 *	Availables values :<br>
 *	- ONESHOT<br>
 *	- CONTINUOUS<br>
 *	- MULTIFRAME<br>
 *	- GEOMETRICAL<br>
 *	- MEASURE_DARK_FRAME<br>
 */
	string	memorizedInternalAcquisitionMode;
/**
 *	Memorize all the flags correction in this Property:<br>
 *	mask -> bit 0 <br>
 *	bias -> bit 1 <br>
 *	dark -> bit 2 <br>
 *	flood -> bit 3 <br>
 *	geom -> bit 12 <br>
 *	
 *	
 */
	Tango::DevULong	memorizedCorrectionFlags;
/**
 *	Memorize/Define  the initialDelayTime attribute in ms at Init device:<br>
 */
	Tango::DevDouble	memorizedInitialDelayTime;
/**
 *	Memorize/Define  the readoutDelayTime attribute in ms at Init device:<br>
 */
	Tango::DevDouble	memorizedReadoutDelayTime;
/**
 *	Memorize/Define  the exposureMultiplier attribute at Init device:<br>
 */
	Tango::DevDouble	memorizedExposureMultiplier;
/**
 *	Memorize/Define  the gapMultiplier attribute at Init device:<br>
 */
	Tango::DevDouble	memorizedGapMultiplier;
/**
 *	Memorize/Define  the highSpeed attribute at Init device:<br>
 */
	Tango::DevBoolean	memorizedHighSpeed;
//@}

/**
 *    @name Device properties
 *    Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *    @param cl    Class.
 *    @param s     Device Name
 */
    AviexCCD(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *    @param cl    Class.
 *    @param s     Device Name
 */
    AviexCCD(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *    @param cl    Class.
 *    @param s     Device name
 *    @param d    Device description.
 */
    AviexCCD(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */    
    ~AviexCCD() {delete_device();};
/**
 *    will be called at device destruction or at init command.
 */
    void delete_device();
//@}

    
/**@name Miscellaneous methods */
//@{
/**
 *    Initialize the device
 */
    virtual void init_device();
/**
 *    Always executed method before execution command method.
 */
    virtual void always_executed_hook();

//@}

/**
 * @name AviexCCD methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for mxLibraryVersion acquisition result.
 */
	virtual void read_mxLibraryVersion(Tango::Attribute &attr);
/**
 *	Extract real attribute values for internalAcquisitionMode acquisition result.
 */
	virtual void read_internalAcquisitionMode(Tango::Attribute &attr);
/**
 *	Write internalAcquisitionMode attribute values to hardware.
 */
	virtual void write_internalAcquisitionMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for initialDelayTime acquisition result.
 */
	virtual void read_initialDelayTime(Tango::Attribute &attr);
/**
 *	Write initialDelayTime attribute values to hardware.
 */
	virtual void write_initialDelayTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for readoutDelayTime acquisition result.
 */
	virtual void read_readoutDelayTime(Tango::Attribute &attr);
/**
 *	Write readoutDelayTime attribute values to hardware.
 */
	virtual void write_readoutDelayTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for exposureMultiplier acquisition result.
 */
	virtual void read_exposureMultiplier(Tango::Attribute &attr);
/**
 *	Write exposureMultiplier attribute values to hardware.
 */
	virtual void write_exposureMultiplier(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gapMultiplier acquisition result.
 */
	virtual void read_gapMultiplier(Tango::Attribute &attr);
/**
 *	Write gapMultiplier attribute values to hardware.
 */
	virtual void write_gapMultiplier(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for maskCorrection acquisition result.
 */
	virtual void read_maskCorrection(Tango::Attribute &attr);
/**
 *	Write maskCorrection attribute values to hardware.
 */
	virtual void write_maskCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for biasCorrection acquisition result.
 */
	virtual void read_biasCorrection(Tango::Attribute &attr);
/**
 *	Write biasCorrection attribute values to hardware.
 */
	virtual void write_biasCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for darkCorrection acquisition result.
 */
	virtual void read_darkCorrection(Tango::Attribute &attr);
/**
 *	Write darkCorrection attribute values to hardware.
 */
	virtual void write_darkCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for floodCorrection acquisition result.
 */
	virtual void read_floodCorrection(Tango::Attribute &attr);
/**
 *	Write floodCorrection attribute values to hardware.
 */
	virtual void write_floodCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for geomCorrection acquisition result.
 */
	virtual void read_geomCorrection(Tango::Attribute &attr);
/**
 *	Write geomCorrection attribute values to hardware.
 */
	virtual void write_geomCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for highSpeed acquisition result.
 */
	virtual void read_highSpeed(Tango::Attribute &attr);
/**
 *	Write highSpeed attribute values to hardware.
 */
	virtual void write_highSpeed(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for mxLibraryVersion attribute.
 */
	virtual bool is_mxLibraryVersion_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for internalAcquisitionMode attribute.
 */
	virtual bool is_internalAcquisitionMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for initialDelayTime attribute.
 */
	virtual bool is_initialDelayTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for readoutDelayTime attribute.
 */
	virtual bool is_readoutDelayTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for exposureMultiplier attribute.
 */
	virtual bool is_exposureMultiplier_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gapMultiplier attribute.
 */
	virtual bool is_gapMultiplier_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for maskCorrection attribute.
 */
	virtual bool is_maskCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for biasCorrection attribute.
 */
	virtual bool is_biasCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for darkCorrection attribute.
 */
	virtual bool is_darkCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for floodCorrection attribute.
 */
	virtual bool is_floodCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for geomCorrection attribute.
 */
	virtual bool is_geomCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for highSpeed attribute.
 */
	virtual bool is_highSpeed_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for SetParam command.
 */
	virtual bool is_SetParam_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetParam command.
 */
	virtual bool is_GetParam_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * 
 *	@param	argin	name,value
 *	@exception DevFailed
 */
	void	set_param(const Tango::DevVarStringArray *);
/**
 * 
 *	@param	argin	name
 *	@return	value
 *	@exception DevFailed
 */
	Tango::DevString	get_param(Tango::DevString);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

    //    Here is the end of the automatic code generation part
    //-------------------------------------------------------------    
	// return true if the device is correctly initialized in init_device
	bool is_device_initialized(){return m_is_device_initialized;};


protected :    
    //    Add your own data members here
    //-----------------------------------------
    
    //state & status stuff
    bool                        m_is_device_initialized ;
    stringstream                m_status_message;
    //lima OBJECTS
    Aviex::Interface* m_hw;
    CtControl*                  m_ct;
    Aviex::Camera*    m_camera;	
	
    std::string                 m_acquisition_mode;	//aquisition mode name 	(STANDARD, CONTINUOUS, FOCUS)
	unsigned long				m_correction_flags;
    
};

}    // namespace_ns

#endif    // _AVIEXCCD_H
