//=============================================================================
//
// file :        Layout.h
//
// description : Include for the Layout class.
//
// project :	Lima Layout Device Specific
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _LAYOUT_H
#define _LAYOUT_H


/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

//	Add your own constant definitions here.
//-----------------------------------------------
#include "Factory.h"
#include <tango.h>
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>
#include <yat/threading/Mutex.h>
#include <yat/utils/XString.h>

#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "lima/SoftOpId.h"
#include "lima/SoftOpExternalMgr.h"
#include "processlib/Data.h"
#include "processlib/TaskMgr.h"
#include <map>


#define MAX_ATTRIBUTE_STRING_LENGTH     256
#define CURRENT_VERSION                 "1.2.0"

namespace Layout_ns
{

    class LayoutTask : public LinkTask
    {
    public:

        //ctor
        LayoutTask(const std::string& opType, long opValue) :
        LinkTask(),
        m_operation_type(opType),
        m_operation_value(opValue) { }

        //dtor
        ~LayoutTask(){}       
        
        //define the operation type ( + - * / >> << )
        void setOperationType(const std::string& opType)
        {
            m_operation_type = opType;
        }

        //get the operation type ( + - * / >> << )
        const std::string& getOperationType()
        {
            return m_operation_type;
        }
        
        //define the operation value
        void setOperationValue(long opValue)
        {
            m_operation_value = opValue;
        }

        //get the operation value
        long getOperationValue()
        {
            return m_operation_value;
        }
        
        virtual Data process(Data &aData)
        {
            Data aNewData;
            aNewData.frameNumber = aData.frameNumber;
            aNewData = aData;
            switch(aData.type)
            {
                case Data::UINT8: _compute<unsigned char>(aData, aNewData);
                    break;
                case Data::UINT16: _compute<unsigned short>(aData, aNewData);
                    break;
                case Data::UINT32: _compute<unsigned int>(aData, aNewData);
                    break;
            }
            return aNewData;
        }

    private:

        template<class INPUT>
        void _compute(Data &aSrc, Data &aDst)
        {
            INPUT *aSrcPt = (INPUT*) aSrc.data();
            INPUT *aDstPt = (INPUT*) aDst.data();
            int aNbPixel = aSrc.dimensions[0] * aSrc.dimensions[1];
            for(int i = 0; i < aNbPixel; i++, aSrcPt++, aDstPt++)
            {
                if(m_operation_type == "+")
                    *aDstPt = (*aSrcPt + m_operation_value);
                if(m_operation_type == "-")
                    *aDstPt = (*aSrcPt > m_operation_value) ? (*aSrcPt - m_operation_value) : 0;
                if(m_operation_type == "*")
                    *aDstPt = (*aSrcPt * m_operation_value);
                if(m_operation_type == "/")
                    *aDstPt = (m_operation_value > 0) ? (*aSrcPt / m_operation_value) : *aSrcPt;
                if(m_operation_type == "<<")
                    *aDstPt = (*aSrcPt << m_operation_value);
                if(m_operation_type == ">>")
                    *aDstPt = (*aSrcPt >> m_operation_value);
            }
        }

        std::string m_operation_type;
        long m_operation_value;
    };

    /**
     * Class Description:
     * Lima Device Specific for post process image
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


    class Layout : public TANGO_BASE_CLASS
    {
    public:
        //	Add your own data members here
        //-----------------------------------------


        //	Here is the Start of the automatic code generation part
        //-------------------------------------------------------------	
        /**
         *	@name attributes
         *	Attribute member data.
         */
        //@{
		Tango::DevString	*attr_version_read;
		Tango::DevString	*attr_operationType_read;
		Tango::DevString	attr_operationType_write;
		Tango::DevString	*attr_operationValue_read;
		Tango::DevString	attr_operationValue_write;
		Tango::DevString	*attr_operationsList_read;
//@}

        /**
         * @name Device properties
         * Device properties member data.
         */
        //@{
/**
 *	Memorize all operationType declared in the order to process the image.
 */
	vector<string>	memorizedOperationTypes;
/**
 *	Memorize all operationValue associated to the operationType declared in the order to process the image.
 */
	vector<string>	memorizedOperationValues;
/**
 *	Memorize all levels associated to the operationType declared in the order to process the image.
 */
	vector<long>	memorizedOperationLevels;
//@}

        /**
         *	@name Device properties
         *	Device property member data.
         */
        //@{
        //@}

        /**@name Constructors
         * Miscellaneous constructors */
        //@{
        /**
         * Constructs a newly allocated Command object.
         *
         *	@param cl	Class.
         *	@param s 	Device Name
         */
        Layout(Tango::DeviceClass *cl, string &s);
        /**
         * Constructs a newly allocated Command object.
         *
         *	@param cl	Class.
         *	@param s 	Device Name
         */
        Layout(Tango::DeviceClass *cl, const char *s);
        /**
         * Constructs a newly allocated Command object.
         *
         *	@param cl	Class.
         *	@param s 	Device name
         *	@param d	Device description.
         */
        Layout(Tango::DeviceClass *cl, const char *s, const char *d);
        //@}

        /**@name Destructor
         * Only one destructor is defined for this class */
        //@{

        /**
         * The object destructor.
         */
        ~Layout()
        {
            delete_device();
        };
        /**
         *	will be called at device destruction or at init command.
         */
        void delete_device();
        //@}


        /**@name Miscellaneous methods */
        //@{
        /**
         *	Initialize the device
         */
        virtual void init_device();
        /**
         *	Always executed method before execution command method.
         */
        virtual void always_executed_hook();

//@}

/**
 * @name Layout methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for version acquisition result.
 */
	virtual void read_version(Tango::Attribute &attr);
/**
 *	Extract real attribute values for operationType acquisition result.
 */
	virtual void read_operationType(Tango::Attribute &attr);
/**
 *	Write operationType attribute values to hardware.
 */
	virtual void write_operationType(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for operationValue acquisition result.
 */
	virtual void read_operationValue(Tango::Attribute &attr);
/**
 *	Write operationValue attribute values to hardware.
 */
	virtual void write_operationValue(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for operationsList acquisition result.
 */
	virtual void read_operationsList(Tango::Attribute &attr);
/**
 *	Read/Write allowed for version attribute.
 */
	virtual bool is_version_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for operationType attribute.
 */
	virtual bool is_operationType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for operationValue attribute.
 */
	virtual bool is_operationValue_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for operationsList attribute.
 */
	virtual bool is_operationsList_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for AddOperation command.
 */
	virtual bool is_AddOperation_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for RemoveOperation command.
 */
	virtual bool is_RemoveOperation_allowed(const CORBA::Any &any);
/**
 * Add Lima external operation in order to transform the image acquired from the detector.<br>
 *	User must first define the operationType, operationValue attributes<br>
 *	argin will define the level of operation.
 *	@param	argin	
 *	@exception DevFailed
 */
	void	add_operation(Tango::DevLong);
/**
 * Remove a Lima external operation previously defined at the the level = argin.<br>
 *	@param	argin	
 *	@exception DevFailed
 */
	void	remove_operation(Tango::DevLong);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

        //	Here is the end of the automatic code generation part
        //-------------------------------------------------------------	
        Tango::DevState dev_state();

        // return true if the device is correctly initialized in init_device

        bool is_device_initialized()
        {
            return m_is_device_initialized;
        };

        void add_external_operation(long level);
        void delete_external_operation(long level);
        void memorize_all_operations(void);

    protected:
        //	Add your own data members here
        //-----------------------------------------
        bool                                m_is_device_initialized;
        stringstream                        m_status_message;
        std::string                         m_operationType;
        std::string                         m_operationValue;
        
        
        //map used to memorize all active operations
        struct operationParams
        {
            std::string opId;
            std::string operationType;
            std::string operationValue;
        };
        
        std::map<long, operationParams >    m_mapOperations; 
        
        //LIMA objects
        lima::CtControl*                m_ct;
        std::vector<LayoutTask*>        m_layout_tasks;
    };

} // namespace_ns

#endif	// _LAYOUT_H
