static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         SimulatorCCD.cpp
//
// description :  C++ source for the SimulatorCCD and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                SimulatorCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//          This file is generated by POGO
//    (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================
#ifdef WIN32
#include <tango.h>
#include <PogoHelper.h>
#endif

#include <SimulatorCCD.h>
#include <SimulatorCCDClass.h>

#ifndef WIN32
#include <tango.h>
#include <PogoHelper.h>
#endif


namespace SimulatorCCD_ns
{
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::SimulatorCCD(string &s)
//
// description :     constructor for simulated SimulatorCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------

SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl, string &s)
: Tango::Device_4Impl(cl, s.c_str())
{
    init_device();
}

SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl, const char *s)
: Tango::Device_4Impl(cl, s)
{
    init_device();
}

SimulatorCCD::SimulatorCCD(Tango::DeviceClass *cl, const char *s, const char *d)
: Tango::Device_4Impl(cl, s, d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::delete_device()
//
// description :     will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::delete_device()
{
    INFO_STREAM << "SimulatorCCD::SimulatorCCD() delete device " << device_name << endl;
    //    Delete device allocated objects
    DELETE_SCALAR_ATTRIBUTE(attr_growFactor_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_fillType_read);
}

//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::init_device()
//
// description :     will be called at device initialization.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::init_device()
{
    INFO_STREAM << "SimulatorCCD::SimulatorCCD() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------
    get_device_property();
    CREATE_SCALAR_ATTRIBUTE(attr_growFactor_read);
    CREATE_DEVSTRING_ATTRIBUTE(attr_fillType_read,  MAX_ATTRIBUTE_STRING_LENGTH);

    //By default INIT, need to ensure that all objets are OK before set the device to STANDBY
    set_state(Tango::INIT);
    m_is_device_initialized = false;
    m_status_message.str("");

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("SimulatorCCD");
		
        //- get interface to specific camera
        m_hw = dynamic_cast<Simulator::Interface*> (m_ct->hwInterface());
		
        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

		// write fillType At Init 
		INFO_STREAM << "Write tango hardware at Init - fillType." << endl;		
        Tango::WAttribute &fillType = dev_attr->get_w_attr_by_name("fillType");
        m_fillType = memorizedFillType;
        strcpy(*attr_fillType_read, memorizedFillType.c_str());
        fillType.set_write_value(memorizedFillType);
        write_fillType(fillType);
		
		// write growFactor At Init 
		INFO_STREAM << "Write tango hardware at Init - growFactor." << endl;
        Tango::WAttribute &growFactor = dev_attr->get_w_attr_by_name("growFactor");
        *attr_growFactor_read = attr_growFactor_write = memorizedGrowFactor;
        growFactor.set_write_value(memorizedGrowFactor);
        write_growFactor(growFactor);		

    }
    catch (Exception& e)
    {
        ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::get_device_property()
//
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::get_device_property()
{
    //	Initialize your default values here (if not done with  POGO).
    //------------------------------------------------------------------

    //	Read device properties from database.(Automatic code generation)
    //------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("MemorizedFillType"));
	dev_prop.push_back(Tango::DbDatum("MemorizedGrowFactor"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	SimulatorCCDClass	*ds_class =
		(static_cast<SimulatorCCDClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize MemorizedFillType from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedFillType;
	else {
		//	Try to initialize MemorizedFillType from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedFillType;
	}
	//	And try to extract MemorizedFillType value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedFillType;

	//	Try to initialize MemorizedGrowFactor from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedGrowFactor;
	else {
		//	Try to initialize MemorizedGrowFactor from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedGrowFactor;
	}
	//	And try to extract MemorizedGrowFactor value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedGrowFactor;



    //	End of Automatic code generation
    //------------------------------------------------------------------
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "GAUSS", "MemorizedFillType");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1.0", "MemorizedGrowFactor");
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::always_executed_hook()
//
// description :     method always executed before any command is executed
//
//-----------------------------------------------------------------------------

void SimulatorCCD::always_executed_hook()
{
    DEBUG_STREAM << "SimulatorCCD::always_executed_hook() entering... " << endl;

	try
	{
		yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
		m_status_message.str("");
		//- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("SimulatorCCD");
		
        //- get interface to specific camera
        m_hw = dynamic_cast<Simulator::Interface*> (m_ct->hwInterface());
		
        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());
		
		dev_state();

	}
	catch (Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		//- throw exception
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	catch (Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		m_status_message << "Initialization Failed : " << string(df.errors[0].desc) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
}
//+----------------------------------------------------------------------------
//
// method :         SimulatorCCD::read_attr_hardware
//
// description :     Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::read_attr_hardware(vector<long> &attr_list)
{
    DEBUG_STREAM << "SimulatorCCD::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    //    Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::read_xOffset
// 
// description :  	Reads the offsets on X axis position.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::read_xOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SimulatorCCD::read_xOffset(Tango::Attribute &attr) entering... "<< endl;
  
   try
    {
        attr.set_value(&attr_xOffset_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SimulatorCCD::read_xOffset");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SimulatorCCD::read_xOffset");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::write_xOffset
// 
// description : Sets an offset on X axis position
//
//-----------------------------------------------------------------------------
void SimulatorCCD::write_xOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SimulatorCCD::write_xOffset(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
      attr.get_write_value(attr_xOffset_write);
      m_camera->computeNewXOffset(attr_xOffset_write);
  }
  catch (Tango::DevFailed& df)
  {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        "TANGO_DEVICE_ERROR",
                                        string(df.errors[0].desc).c_str(),
                                        "SimulatorCCD::write_xOffset");
  }
  catch (Exception& e)
  {
      ERROR_STREAM << e.getErrMsg() << endl;
      //- throw exception
      Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                     e.getErrMsg().c_str(),
                                     "SimulatorCCD::write_xOffset");
  }
}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::read_yOffset
// 
// description : 	Reads the offsets on Y axis position.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::read_yOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "SimulatorCCD::read_yOffset(Tango::Attribute &attr) entering... "<< endl;
  
    try
    {
        attr.set_value(&attr_yOffset_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SimulatorCCD::read_yOffset");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SimulatorCCD::read_yOffset");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::write_yOffset
// 
// description : 	Sets an offset on y axis position.
//
//-----------------------------------------------------------------------------
void SimulatorCCD::write_yOffset(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "SimulatorCCD::write_yOffset(Tango::WAttribute &attr) entering... "<< endl;
  
    try
    {
        attr.get_write_value(attr_yOffset_write);
        m_camera->computeNewYOffset(attr_yOffset_write);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SimulatorCCD::write_yOffset");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SimulatorCCD::write_yOffset");
    }

}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::read_fillType
//
// description : 	Extract real attribute values for fillType acquisition result.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::read_fillType(Tango::Attribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::read_fillType(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string strFillType;
        Simulator::FrameBuilder::FillType eFillType;
        m_camera->getFrameBuilder()->getFillType(eFillType);

        switch (eFillType)
        {
            case Simulator::FrameBuilder::Gauss:
                strFillType = STR_GAUSS;
                break;
            case Simulator::FrameBuilder::Diffraction:
                strFillType = STR_DIFFRACTION;
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected filltype value.",
                                               "SimulatorCCD::read_fillType");
            }
        }


        strcpy(*attr_fillType_read, strFillType.c_str());
        attr.set_value(attr_fillType_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SimulatorCCD::read_fillType");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SimulatorCCD::read_fillType");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::write_fillType
//
// description : 	Write fillType attribute values to hardware.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::write_fillType(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::write_fillType(Tango::WAttribute &attr) entering... " << endl;
    try
    {
		m_fillType = *attr_fillType_read;//memorize previous valid value
        attr.get_write_value(attr_fillType_write);
        string current = attr_fillType_write;
        transform(current.begin(), current.end(), current.begin(), ::toupper);
        if ((current != STR_GAUSS) &&
            (current != STR_DIFFRACTION)
            )
        {
            attr_fillType_write = const_cast<Tango::DevString>(m_fillType.c_str());
            Tango::Except::throw_exception("CONFIGURATION_ERROR",
                                           "Possible fillType values are:"
                                           "\n- GAUSS"
                                           "\n- DIFFRACTION",
                                           "SimulatorCCD::write_fillType");
        }

        //- THIS IS AN AVAILABLE FILLTYPE
        m_fillType = current;

        if (STR_GAUSS == m_fillType)
            m_camera->getFrameBuilder()->setFillType(Simulator::FrameBuilder::Gauss);
        else if (STR_DIFFRACTION == m_fillType)
            m_camera->getFrameBuilder()->setFillType(Simulator::FrameBuilder::Diffraction);		
        yat4tango::PropertyHelper::set_property(this, "MemorizedFillType", m_fillType);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "SimulatorCCD::write_fillType");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "SimulatorCCD::write_fillType");
    }

}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::read_growFactor
//
// description : 	Extract real attribute values for growFactor acquisition result.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::read_growFactor(Tango::Attribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::read_growFactor(Tango::Attribute &attr) entering... " << endl;
    assert(NULL != m_ct);
    if (NULL != m_ct)
    {
        try
        {
            double growFactor;
            m_camera->getFrameBuilder()->getGrowFactor(growFactor);
            *attr_growFactor_read = Tango::DevDouble(growFactor);
            attr.set_value(attr_growFactor_read);
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "SimulatorCCD::read_growFactor");
        }
        catch (lima::Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "SimulatorCCD::read_growFactor");
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		SimulatorCCD::write_growFactor
//
// description : 	Write growFactor attribute values to hardware.
//
//-----------------------------------------------------------------------------

void SimulatorCCD::write_growFactor(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "SimulatorCCD::write_growFactor(Tango::WAttribute &attr) entering... " << endl;

    assert(NULL != m_ct);
    if (NULL != m_ct)
    {
        try
        {
            attr.get_write_value(attr_growFactor_write);
            m_camera->getFrameBuilder()->setGrowFactor(attr_growFactor_write);
			yat4tango::PropertyHelper::set_property(this, "MemorizedGrowFactor", attr_growFactor_write);			
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "SimulatorCCD::write_growFactor");
        }
        catch (lima::Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "SimulatorCCD::write_growFactor");
        }
    }
}


//+------------------------------------------------------------------
/**
 *    method:    SimulatorCCD::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------

Tango::DevState SimulatorCCD::dev_state()
{
    Tango::DevState argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "SimulatorCCD::dev_state(): entering... !" << endl;
    //    Add your own code to control device here
    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        // state & status are retrieved from Factory, Factory is updated by Generic device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    DEBUG_STREAM << "SimulatorCCD::dev_state() ending... " << endl;
    return argout;
}



}	//	namespace
