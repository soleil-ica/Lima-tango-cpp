//=============================================================================
//
// file :        SimulatorCCD.h
//
// description : Include for the SimulatorCCD class.
//
// project :	Lima
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _SIMULATORCCD_H
#define _SIMULATORCCD_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------
#include "Factory.h"
#include <tango.h>
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>
#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"


#include <SimulatorInterface.h>
#include <SimulatorFrameBuilder.h>

#define MAX_ATTRIBUTE_STRING_LENGTH     256
#define STR_GAUSS                       "GAUSS"
#define STR_DIFFRACTION                 "DIFFRACTION"


namespace SimulatorCCD_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class SimulatorCCD: public TANGO_BASE_CLASS
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevDouble	*attr_growFactor_read;
		Tango::DevDouble	attr_growFactor_write;
		Tango::DevString	*attr_fillType_read;
		Tango::DevString	attr_fillType_write;
		Tango::DevDouble	*attr_xOffset_read;
		Tango::DevDouble	attr_xOffset_write;
		Tango::DevDouble	*attr_yOffset_read;
		Tango::DevDouble	attr_yOffset_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	memorize the value of the fillType attribute.
 */
	string	memorizedFillType;
/**
 *	
 */
	Tango::DevDouble	memorizedGrowFactor;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	SimulatorCCD(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	SimulatorCCD(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	SimulatorCCD(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~SimulatorCCD() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name SimulatorCCD methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for growFactor acquisition result.
 */
	virtual void read_growFactor(Tango::Attribute &attr);
/**
 *	Write growFactor attribute values to hardware.
 */
	virtual void write_growFactor(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for fillType acquisition result.
 */
	virtual void read_fillType(Tango::Attribute &attr);
/**
 *	Write fillType attribute values to hardware.
 */
	virtual void write_fillType(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for xOffset acquisition result.
 */
	virtual void read_xOffset(Tango::Attribute &attr);
/**
 *	Write xOffset attribute values to hardware.
 */
	virtual void write_xOffset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for yOffset acquisition result.
 */
	virtual void read_yOffset(Tango::Attribute &attr);
/**
 *	Write yOffset attribute values to hardware.
 */
	virtual void write_yOffset(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for growFactor attribute.
 */
	virtual bool is_growFactor_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fillType attribute.
 */
	virtual bool is_fillType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xOffset attribute.
 */
	virtual bool is_xOffset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yOffset attribute.
 */
	virtual bool is_yOffset_allowed(Tango::AttReqType type);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	
	Tango::DevState dev_state();
     
     // return true if the device is correctly initialized in init_device
	bool is_device_initialized(){return m_is_device_initialized;};


protected :	
	//	Add your own data members here
	//-----------------------------------------
    bool         m_is_device_initialized ;
    std::stringstream   m_status_message;
    std::string  m_fillType;

    //LIMA objects
    lima::Simulator::Interface* m_hw;
    lima::CtControl*            m_ct;
    lima::Simulator::Camera*    m_camera;    
};

}	// namespace_ns

#endif	// _SIMULATORCCD_H
