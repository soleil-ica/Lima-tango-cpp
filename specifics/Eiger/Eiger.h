//=============================================================================
//
// file :        Eiger.h
//
// description : Include for the Eiger class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _Eiger_H
#define _Eiger_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

//	Add your own constant definitions here.
//-----------------------------------------------
#include "Factory.h"
#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "lima/CtSaving.h"
#include "EigerInterface.h"
#include "EigerCamera.h"

//- STL 
#include <algorithm>

#define MAX_ATTRIBUTE_STRING_LENGTH     256

//using namespace lima::Eiger;
using namespace lima;
using namespace yat4tango;

namespace Eiger_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class Eiger : public TANGO_BASE_CLASS
{
public:
    //	Add your own data members here
    //-----------------------------------------
    Tango::DevDouble attr_thresholdEnergy_read_cache;
    Tango::DevDouble attr_photonEnergy_read_cache;
    Tango::DevBoolean attr_compression_read_cache;
    Tango::DevBoolean attr_autoSummation_read_cache;
    Tango::DevBoolean attr_countrateCorrection_read_cache;
    Tango::DevBoolean attr_virtualPixelCorrection_read_cache;
    Tango::DevBoolean attr_flatfieldCorrection_read_cache;
    Tango::DevBoolean attr_pixelMask_read_cache;
    Tango::DevDouble attr_temperature_read_cache;
    Tango::DevDouble attr_humidity_read_cache;
    Tango::DevDouble attr_wavelength_read_cache;
    std::string attr_roiMode_read_cache;    
    Tango::DevDouble attr_beamCenterX_read_cache;
    Tango::DevDouble attr_beamCenterY_read_cache;
    Tango::DevDouble attr_detectorDistance_read_cache;
    Tango::DevDouble attr_detectorReadoutTime_read_cache;
    std::string attr_compressionType_read_cache;
    std::string attr_dataCollectionDate_read_cache;
    Tango::DevDouble attr_chiIncrement_read_cache;
    Tango::DevDouble attr_chiStart_read_cache;
    Tango::DevDouble attr_kappaIncrement_read_cache;
    Tango::DevDouble attr_kappaStart_read_cache;
    Tango::DevDouble attr_omegaIncrement_read_cache;
    Tango::DevDouble attr_omegaStart_read_cache;
    Tango::DevDouble attr_phiIncrement_read_cache;
    Tango::DevDouble attr_phiStart_read_cache;

    //	Here is the Start of the automatic code generation part
    //-------------------------------------------------------------	
    /**
     *	@name attributes
     *	Attribute member data.
     */
    //@{
		Tango::DevBoolean	*attr_countrateCorrection_read;
		Tango::DevBoolean	attr_countrateCorrection_write;
		Tango::DevBoolean	*attr_flatfieldCorrection_read;
		Tango::DevBoolean	attr_flatfieldCorrection_write;
		Tango::DevBoolean	*attr_pixelMask_read;
		Tango::DevBoolean	attr_pixelMask_write;
		Tango::DevBoolean	*attr_virtualPixelCorrection_read;
		Tango::DevBoolean	attr_virtualPixelCorrection_write;
		Tango::DevString	*attr_managedMode_read;
		Tango::DevString	*attr_dataCollectionDate_read;
		Tango::DevDouble	*attr_thresholdEnergy_read;
		Tango::DevDouble	attr_thresholdEnergy_write;
		Tango::DevDouble	*attr_photonEnergy_read;
		Tango::DevDouble	attr_photonEnergy_write;
		Tango::DevDouble	*attr_wavelength_read;
		Tango::DevDouble	attr_wavelength_write;
		Tango::DevString	*attr_roiMode_read;
		Tango::DevString	attr_roiMode_write;
		Tango::DevDouble	*attr_beamCenterX_read;
		Tango::DevDouble	attr_beamCenterX_write;
		Tango::DevDouble	*attr_beamCenterY_read;
		Tango::DevDouble	attr_beamCenterY_write;
		Tango::DevDouble	*attr_detectorDistance_read;
		Tango::DevDouble	attr_detectorDistance_write;
		Tango::DevDouble	*attr_detectorReadoutTime_read;
		Tango::DevDouble	*attr_temperature_read;
		Tango::DevDouble	*attr_humidity_read;
		Tango::DevDouble	*attr_chiIncrement_read;
		Tango::DevDouble	attr_chiIncrement_write;
		Tango::DevDouble	*attr_chiStart_read;
		Tango::DevDouble	attr_chiStart_write;
		Tango::DevDouble	*attr_kappaIncrement_read;
		Tango::DevDouble	attr_kappaIncrement_write;
		Tango::DevDouble	*attr_kappaStart_read;
		Tango::DevDouble	attr_kappaStart_write;
		Tango::DevDouble	*attr_omegaIncrement_read;
		Tango::DevDouble	attr_omegaIncrement_write;
		Tango::DevDouble	*attr_omegaStart_read;
		Tango::DevDouble	attr_omegaStart_write;
		Tango::DevDouble	*attr_phiIncrement_read;
		Tango::DevDouble	attr_phiIncrement_write;
		Tango::DevDouble	*attr_phiStart_read;
		Tango::DevDouble	attr_phiStart_write;
		Tango::DevBoolean	*attr_autoSummation_read;
		Tango::DevBoolean	attr_autoSummation_write;
		Tango::DevBoolean	*attr_compression_read;
		Tango::DevBoolean	attr_compression_write;
		Tango::DevString	*attr_compressionType_read;
		Tango::DevString	attr_compressionType_write;
		Tango::DevString	*attr_softwareVersion_read;
//@}

    /**
     * @name Device properties
     * Device properties member data.
     */
    //@{
/**
 *	Eiger server IP address (ex: 192.168.0.1)
 */
	string	detectorIP;
/**
 *	Define the timestamp type of each frame: <br>
 *	- RELATIVE : The time difference between the moment of reading the frame and the start acquisition time<br>
 *	- ABSOLUTE : The time at the moment of reading the frame from detector<br>
 */
	string	timestampType;
/**
 *	Enable/Disable downloading data files from DCU.
 *	Do not download data files (master+data) [by default]
 */
	Tango::DevBoolean	downloadDataFile;
/**
 *	Memorize the value of countrateCorrection attribute.
 */
	Tango::DevBoolean	memorizedCountrateCorrection;
/**
 *	Memorize the value of flatfieldCorrection attribute.
 */
	Tango::DevBoolean	memorizedFlatfieldCorrection;
/**
 *	Memorize the value of pixelMask attribute.
 */
	Tango::DevBoolean	memorizedPixelMask;
/**
 *	Memorize the value of virtualPixelCorrection attribute.
 */
	Tango::DevBoolean	memorizedVirtualPixelCorrection;
/**
 *	Memorize the value of thresholdEnergy attribute.
 */
	Tango::DevDouble	memorizedThresholdEnergy;
/**
 *	Memorize the value of photonEnergy attribute.
 */
	Tango::DevDouble	memorizedPhotonEnergy;
/**
 *	Memorize the value of autoSummation attribute.
 */
	Tango::DevBoolean	memorizedAutoSummation;
/**
 *	Memorize the value of compression attribute.
 */
	Tango::DevBoolean	memorizedCompression;
/**
 *	Memorize the value of compressionType attribute.
 */
	string	memorizedCompressionType;
/**
 *	Memorize the value of wavelength attribute.
 */
	Tango::DevDouble	memorizedWavelength;
/**
 *	Memorize the value of roiMode attribute.
 */
	string	memorizedRoiMode;
/**
 *	Memorize the value of beamCenterX attribute.
 */
	Tango::DevDouble	memorizedBeamCenterX;
/**
 *	Memorize the value of beamCenterY attribute.
 */
	Tango::DevDouble	memorizedBeamCenterY;
/**
 *	Memorize the value of detectorDistance attribute.
 */
	Tango::DevDouble	memorizedDetectorDistance;
/**
 *	Memorize the value of chiIncrement attribute.
 */
	Tango::DevDouble	memorizedChiIncrement;
/**
 *	Memorize the value of chiStart attribute.
 */
	Tango::DevDouble	memorizedChiStart;
/**
 *	Memorize the value of kappaIncrement attribute.
 */
	Tango::DevDouble	memorizedKappaIncrement;
/**
 *	Memorize the value of kappaStart attribute.
 */
	Tango::DevDouble	memorizedKappaStart;
/**
 *	Memorize the value of omegaIncrement attribute.
 */
	Tango::DevDouble	memorizedOmegaIncrement;
/**
 *	Memorize the value of omegaStart attribute.
 */
	Tango::DevDouble	memorizedOmegaStart;
/**
 *	Memorize the value of phiIncrement attribute.
 */
	Tango::DevDouble	memorizedPhiIncrement;
/**
 *	Memorize the value of phiStart attribute.
 */
	Tango::DevDouble	memorizedPhiStart;
//@}

    /**
     *	@name Device properties
     *	Device property member data.
     */
    //@{
    //@}

    /**@name Constructors
     * Miscellaneous constructors */
    //@{
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device Name
     */
    Eiger(Tango::DeviceClass *cl, string &s);
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device Name
     */
    Eiger(Tango::DeviceClass *cl, const char *s);
    /**
     * Constructs a newly allocated Command object.
     *
     *	@param cl	Class.
     *	@param s 	Device name
     *	@param d	Device description.
     */
    Eiger(Tango::DeviceClass *cl, const char *s, const char *d);
    //@}

    /**@name Destructor
     * Only one destructor is defined for this class */
    //@{
        /**
     * The object destructor.
     */
    ~Eiger()
    {
        delete_device();
    };
    /**
     *	will be called at device destruction or at init command.
     */
    void delete_device();
    //@}


    /**@name Miscellaneous methods */
    //@{
    /**
     *	Initialize the device
     */
    virtual void init_device();
    /**
     *	Always executed method before execution command method.
     */
    virtual void always_executed_hook();

//@}

/**
 * @name Eiger methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for countrateCorrection acquisition result.
 */
	virtual void read_countrateCorrection(Tango::Attribute &attr);
/**
 *	Write countrateCorrection attribute values to hardware.
 */
	virtual void write_countrateCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for flatfieldCorrection acquisition result.
 */
	virtual void read_flatfieldCorrection(Tango::Attribute &attr);
/**
 *	Write flatfieldCorrection attribute values to hardware.
 */
	virtual void write_flatfieldCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for pixelMask acquisition result.
 */
	virtual void read_pixelMask(Tango::Attribute &attr);
/**
 *	Write pixelMask attribute values to hardware.
 */
	virtual void write_pixelMask(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for virtualPixelCorrection acquisition result.
 */
	virtual void read_virtualPixelCorrection(Tango::Attribute &attr);
/**
 *	Write virtualPixelCorrection attribute values to hardware.
 */
	virtual void write_virtualPixelCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for managedMode acquisition result.
 */
	virtual void read_managedMode(Tango::Attribute &attr);
/**
 *	Extract real attribute values for dataCollectionDate acquisition result.
 */
	virtual void read_dataCollectionDate(Tango::Attribute &attr);
/**
 *	Extract real attribute values for thresholdEnergy acquisition result.
 */
	virtual void read_thresholdEnergy(Tango::Attribute &attr);
/**
 *	Write thresholdEnergy attribute values to hardware.
 */
	virtual void write_thresholdEnergy(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for photonEnergy acquisition result.
 */
	virtual void read_photonEnergy(Tango::Attribute &attr);
/**
 *	Write photonEnergy attribute values to hardware.
 */
	virtual void write_photonEnergy(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for wavelength acquisition result.
 */
	virtual void read_wavelength(Tango::Attribute &attr);
/**
 *	Write wavelength attribute values to hardware.
 */
	virtual void write_wavelength(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for roiMode acquisition result.
 */
	virtual void read_roiMode(Tango::Attribute &attr);
/**
 *	Write roiMode attribute values to hardware.
 */
	virtual void write_roiMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for beamCenterX acquisition result.
 */
	virtual void read_beamCenterX(Tango::Attribute &attr);
/**
 *	Write beamCenterX attribute values to hardware.
 */
	virtual void write_beamCenterX(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for beamCenterY acquisition result.
 */
	virtual void read_beamCenterY(Tango::Attribute &attr);
/**
 *	Write beamCenterY attribute values to hardware.
 */
	virtual void write_beamCenterY(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for detectorDistance acquisition result.
 */
	virtual void read_detectorDistance(Tango::Attribute &attr);
/**
 *	Write detectorDistance attribute values to hardware.
 */
	virtual void write_detectorDistance(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for detectorReadoutTime acquisition result.
 */
	virtual void read_detectorReadoutTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for temperature acquisition result.
 */
	virtual void read_temperature(Tango::Attribute &attr);
/**
 *	Extract real attribute values for humidity acquisition result.
 */
	virtual void read_humidity(Tango::Attribute &attr);
/**
 *	Extract real attribute values for chiIncrement acquisition result.
 */
	virtual void read_chiIncrement(Tango::Attribute &attr);
/**
 *	Write chiIncrement attribute values to hardware.
 */
	virtual void write_chiIncrement(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for chiStart acquisition result.
 */
	virtual void read_chiStart(Tango::Attribute &attr);
/**
 *	Write chiStart attribute values to hardware.
 */
	virtual void write_chiStart(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for kappaIncrement acquisition result.
 */
	virtual void read_kappaIncrement(Tango::Attribute &attr);
/**
 *	Write kappaIncrement attribute values to hardware.
 */
	virtual void write_kappaIncrement(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for kappaStart acquisition result.
 */
	virtual void read_kappaStart(Tango::Attribute &attr);
/**
 *	Write kappaStart attribute values to hardware.
 */
	virtual void write_kappaStart(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for omegaIncrement acquisition result.
 */
	virtual void read_omegaIncrement(Tango::Attribute &attr);
/**
 *	Write omegaIncrement attribute values to hardware.
 */
	virtual void write_omegaIncrement(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for omegaStart acquisition result.
 */
	virtual void read_omegaStart(Tango::Attribute &attr);
/**
 *	Write omegaStart attribute values to hardware.
 */
	virtual void write_omegaStart(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for phiIncrement acquisition result.
 */
	virtual void read_phiIncrement(Tango::Attribute &attr);
/**
 *	Write phiIncrement attribute values to hardware.
 */
	virtual void write_phiIncrement(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for phiStart acquisition result.
 */
	virtual void read_phiStart(Tango::Attribute &attr);
/**
 *	Write phiStart attribute values to hardware.
 */
	virtual void write_phiStart(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for autoSummation acquisition result.
 */
	virtual void read_autoSummation(Tango::Attribute &attr);
/**
 *	Write autoSummation attribute values to hardware.
 */
	virtual void write_autoSummation(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for compression acquisition result.
 */
	virtual void read_compression(Tango::Attribute &attr);
/**
 *	Write compression attribute values to hardware.
 */
	virtual void write_compression(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for compressionType acquisition result.
 */
	virtual void read_compressionType(Tango::Attribute &attr);
/**
 *	Write compressionType attribute values to hardware.
 */
	virtual void write_compressionType(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for softwareVersion acquisition result.
 */
	virtual void read_softwareVersion(Tango::Attribute &attr);
/**
 *	Read/Write allowed for countrateCorrection attribute.
 */
	virtual bool is_countrateCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for flatfieldCorrection attribute.
 */
	virtual bool is_flatfieldCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for pixelMask attribute.
 */
	virtual bool is_pixelMask_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for virtualPixelCorrection attribute.
 */
	virtual bool is_virtualPixelCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for managedMode attribute.
 */
	virtual bool is_managedMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for dataCollectionDate attribute.
 */
	virtual bool is_dataCollectionDate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for thresholdEnergy attribute.
 */
	virtual bool is_thresholdEnergy_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for photonEnergy attribute.
 */
	virtual bool is_photonEnergy_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for wavelength attribute.
 */
	virtual bool is_wavelength_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roiMode attribute.
 */
	virtual bool is_roiMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for beamCenterX attribute.
 */
	virtual bool is_beamCenterX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for beamCenterY attribute.
 */
	virtual bool is_beamCenterY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorDistance attribute.
 */
	virtual bool is_detectorDistance_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorReadoutTime attribute.
 */
	virtual bool is_detectorReadoutTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for temperature attribute.
 */
	virtual bool is_temperature_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for humidity attribute.
 */
	virtual bool is_humidity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for chiIncrement attribute.
 */
	virtual bool is_chiIncrement_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for chiStart attribute.
 */
	virtual bool is_chiStart_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for kappaIncrement attribute.
 */
	virtual bool is_kappaIncrement_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for kappaStart attribute.
 */
	virtual bool is_kappaStart_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for omegaIncrement attribute.
 */
	virtual bool is_omegaIncrement_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for omegaStart attribute.
 */
	virtual bool is_omegaStart_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for phiIncrement attribute.
 */
	virtual bool is_phiIncrement_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for phiStart attribute.
 */
	virtual bool is_phiStart_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for autoSummation attribute.
 */
	virtual bool is_autoSummation_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for compression attribute.
 */
	virtual bool is_compression_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for compressionType attribute.
 */
	virtual bool is_compressionType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for softwareVersion attribute.
 */
	virtual bool is_softwareVersion_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Initialize command.
 */
	virtual bool is_Initialize_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Disarm command.
 */
	virtual bool is_Disarm_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for UpdateTH command.
 */
	virtual bool is_UpdateTH_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * 
 *	@exception DevFailed
 */
	void	initialize();
/**
 * 
 *	@exception DevFailed
 */
	void	disarm();
/**
 * 
 *	@exception DevFailed
 */
	void	update_th();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

    //	Here is the end of the automatic code generation part
    //-------------------------------------------------------------	

    bool is_device_initialized()
    {
        return m_is_device_initialized;
    };

protected:
    //	Add your own data members here
    //-----------------------------------------
    bool m_is_device_initialized;
    stringstream m_status_message;

    //lima OBJECTS
    lima::Eiger::Interface* m_hw;
    CtControl* m_ct;
    lima::Eiger::Camera* m_camera;
    std::string m_file_name_pattern;
};

} // namespace_ns

#endif // _Eiger_H
