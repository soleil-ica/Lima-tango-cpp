static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         XpadPixelDetector.cpp
//
// description :  C++ source for the XpadPixelDetector and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                XpadPixelDetector are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name        |  Method name
//	----------------------------------------
//  State               |  dev_state()
//  Status              |  dev_status()
//  LoadFlatConfig      |  load_flat_config()
//  LoadAllConfigG      |  load_all_config_g()
//  SaveConfigL         |  save_config_l()
//  SaveConfigG         |  save_config_g()
//  LoadConfig          |  load_config()
//  LoadConfigG         |  load_config_g()
//  Reset               |  reset()
//  GetDacl             |  get_dacl()
//  GetIthl             |  get_ithl()
//  CalibrateOTNSlow    |  calibrate_otnslow()
//  CalibrateOTNMedium  |  calibrate_otnmedium()
//  CalibrateOTNFast    |  calibrate_otnfast()
//  CalibrateBEAM       |  calibrate_beam()
//  CalibrateOTN        |  calibrate_otn()
//  UploadCalibration   |  upload_calibration()
//  UploadWaitTimes     |  upload_wait_times()
//  IncrementITHL       |  increment_ithl()
//  DecrementITHL       |  decrement_ithl()
//
//===================================================================
#include "tango.h"
#include <PogoHelper.h>

#include <XpadPixelDetector.h>
#include <XpadPixelDetectorClass.h>

namespace XpadPixelDetector_ns
{

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::XpadPixelDetector(string &s)
// 
// description : 	constructor for simulated XpadPixelDetector
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
XpadPixelDetector::XpadPixelDetector(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

XpadPixelDetector::XpadPixelDetector(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

XpadPixelDetector::XpadPixelDetector(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::delete_device()
{
	//	Delete device allocated objects
	INFO_STREAM << "XpadPixelDetector::delete_device() " << device_name << endl;

	DELETE_SCALAR_ATTRIBUTE(attr_enableGeometricalCorrection_read);
	DELETE_SCALAR_ATTRIBUTE(attr_enableDoublePixelCorrection_read);
	DELETE_SCALAR_ATTRIBUTE(attr_normalizationFactor_read);

	INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("AviexCCD");
    //    m_ct = 0;
    //}

}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::init_device()
{
	INFO_STREAM << "XpadPixelDetector::XpadPixelDetector() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

	CREATE_SCALAR_ATTRIBUTE(attr_enableGeometricalCorrection_read);
	CREATE_SCALAR_ATTRIBUTE(attr_enableDoublePixelCorrection_read);
	CREATE_SCALAR_ATTRIBUTE(attr_normalizationFactor_read);

    //By default INIT, need to ensure that all objets are OK before set the device to STANDBY
    m_is_device_initialized = false;
    set_state(Tango::INIT);
	m_status_message.str("");
	
	INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

	m_xpad_model = "";
	m_from_init_device = true;

	attr_init_write = 0;
	attr_shutter_write = 0;
	attr_ovf_write = 4000;
	attr_n_write = 0;
	attr_p_write = 0;
	attr_gp1_write = 0;
	attr_gp2_write = 0;
	attr_gp3_write = 0;
	attr_gp4_write = 0;
    attr_enableGeometricalCorrection_write = 0;
	attr_enableDoublePixelCorrection_write = 0;

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("XpadPixelDetector");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Xpad::Interface*>(m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

        //- Xpix Debug
        m_camera->xpixDebug(xpixDebug);

        //- get Xpad Model
        m_camera->getDetectorModel(m_xpad_model);
    }
    catch (Exception& e)
    {
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        m_status_message << "Initialization Failed : UNKNOWN Error" << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;

    //- init the wattributes
    try
    {
		Tango::WAttribute &ovf_attr = dev_attr->get_w_attr_by_name("ovf");
		string ovf_mem_value = ovf_attr.get_mem_value();
		if (ovf_mem_value == "Not used yet")
		{
			ovf_attr.set_write_value(attr_ovf_write);
			write_ovf(ovf_attr);
		}

		Tango::WAttribute &acqtype_attr = dev_attr->get_w_attr_by_name("acquisitionType");
		string acqtype_mem_value = acqtype_attr.get_mem_value();
		if (acqtype_mem_value == "Not used yet")
		{
			acqtype_attr.set_write_value("SYNC");
			write_acquisitionType(acqtype_attr);
		}

		Tango::WAttribute &enablegeomcorr_attr = dev_attr->get_w_attr_by_name("enableGeometricalCorrection");
		string enablegeomcorr_mem_value = enablegeomcorr_attr.get_mem_value();
		if (enablegeomcorr_mem_value == "Not used yet")
		{
			enablegeomcorr_attr.set_write_value(false);
			write_enableGeometricalCorrection(enablegeomcorr_attr);
		}

		Tango::WAttribute &enabledoublepixcorr_attr = dev_attr->get_w_attr_by_name("enableDoublePixelCorrection");
		string enabledoublepixcorr_mem_value = enabledoublepixcorr_attr.get_mem_value();
		if (enabledoublepixcorr_mem_value == "Not used yet")
		{
			enabledoublepixcorr_attr.set_write_value(false);
			write_enableDoublePixelCorrection(enabledoublepixcorr_attr);
		}

		Tango::WAttribute &normalizationFactor_attr = dev_attr->get_w_attr_by_name("normalizationFactor");
		string normalizationFactor_mem_value = normalizationFactor_attr.get_mem_value();
		if (normalizationFactor_mem_value == "Not used yet")
		{
			normalizationFactor_attr.set_write_value(2.5);
			write_normalizationFactor(normalizationFactor_attr);
		}
    }
    catch(Exception& e)
    {
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
		ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch(...)
    {
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
		ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }

    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("XpadModel"));
	dev_prop.push_back(Tango::DbDatum("CalibrationPath"));
	dev_prop.push_back(Tango::DbDatum("CalibrationAdjustingNumber"));
	dev_prop.push_back(Tango::DbDatum("XpixDebug"));
	dev_prop.push_back(Tango::DbDatum("MinLatencyTimeMs"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	XpadPixelDetectorClass	*ds_class =
		(static_cast<XpadPixelDetectorClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize XpadModel from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  xpadModel;
	else {
		//	Try to initialize XpadModel from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  xpadModel;
	}
	//	And try to extract XpadModel value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  xpadModel;

	//	Try to initialize CalibrationPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  calibrationPath;
	else {
		//	Try to initialize CalibrationPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  calibrationPath;
	}
	//	And try to extract CalibrationPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  calibrationPath;

	//	Try to initialize CalibrationAdjustingNumber from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  calibrationAdjustingNumber;
	else {
		//	Try to initialize CalibrationAdjustingNumber from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  calibrationAdjustingNumber;
	}
	//	And try to extract CalibrationAdjustingNumber value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  calibrationAdjustingNumber;

	//	Try to initialize XpixDebug from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  xpixDebug;
	else {
		//	Try to initialize XpixDebug from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  xpixDebug;
	}
	//	And try to extract XpixDebug value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  xpixDebug;

	//	Try to initialize MinLatencyTimeMs from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  minLatencyTimeMs;
	else {
		//	Try to initialize MinLatencyTimeMs from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  minLatencyTimeMs;
	}
	//	And try to extract MinLatencyTimeMs value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  minLatencyTimeMs;



	//	End of Automatic code generation
	//------------------------------------------------------------------

	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop,"TO_BE_DEFINED, eg: IMXPAD_S70","XpadModel");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop,"/no/path/defined","CalibrationPath");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop,"False","XpixDebug");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop,"5","MinLatencyTimeMs");
}
//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::always_executed_hook()
{
	DEBUG_STREAM << "XpadPixelDetector::always_executed_hook() entering... "<< endl;

    try
    {
        m_status_message.str("");
        //- get the singleton control objet used to pilot the lima framework
		m_ct = ControlFactory::instance().get_control("XpadPixelDetector");
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Xpad::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

		//update state
        dev_state();
	}
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
}
//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "XpadPixelDetector::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_normalizationFactor
// 
// description : 	Extract real attribute values for normalizationFactor acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_normalizationFactor(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_normalizationFactor(Tango::Attribute &attr) entering... "<< endl;

	if(m_xpad_model != "IMXPAD_S140" && m_xpad_model != "IMXPAD_S70")
		attr.set_quality(Tango::ATTR_INVALID);
	else
		attr.set_value(&attr_normalizationFactor_write);	
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_normalizationFactor
// 
// description : 	Write normalizationFactor attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_normalizationFactor(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_normalizationFactor(Tango::WAttribute &attr) entering... "<< endl;

	if(m_xpad_model != "IMXPAD_S140" && m_xpad_model != "IMXPAD_S70") 
		attr.set_quality(Tango::ATTR_INVALID);
	else
	{
		attr.get_write_value(attr_normalizationFactor_write);
		m_camera->setNormalizationFactor(attr_normalizationFactor_write);
	}
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_enableDoublePixelCorrection
// 
// description : 	Extract real attribute values for enableDoublePixelCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_enableDoublePixelCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_enableDoublePixelCorrection(Tango::Attribute &attr) entering... "<< endl;

	if(m_xpad_model != "IMXPAD_S140" && m_xpad_model != "IMXPAD_S70")
		attr.set_quality(Tango::ATTR_INVALID);
	else
		attr.set_value(&attr_enableDoublePixelCorrection_write);	
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_enableDoublePixelCorrection
// 
// description : 	Write enableDoublePixelCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_enableDoublePixelCorrection(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_enableDoublePixelCorrection(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
		if(m_xpad_model != "IMXPAD_S140" && m_xpad_model != "IMXPAD_S70")
			attr.set_quality(Tango::ATTR_INVALID);
		else
		{
			attr.get_write_value(attr_enableDoublePixelCorrection_write);

			//- enable the corr
			m_camera->setDoublePixelCorrection(attr_enableDoublePixelCorrection_write);

			//- Reapply the Max ROI
			Size size;
			m_ct->image()->getMaxImageSize(size);
			Bin bin;
			m_ct->image()->getBin(bin);
			Roi roi(Point(0, 0), Size(size.getWidth() / bin.getX(), size.getHeight() / bin.getY()));
			m_ct->image()->setRoi(roi);
		}
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(
					static_cast<const char*> ("TANGO_DEVICE_ERROR"),
					static_cast<const char*> (e.getErrMsg().c_str()),
					static_cast<const char*> ("XpadPixelDetector::write_enableDoublePixelCorrection"));
	}
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_acquisitionType
// 
// description : 	Extract real attribute values for acquisitionType acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_acquisitionType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_acquisitionType(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_acquisitionType
// 
// description : 	Write acquisitionType attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_acquisitionType(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_acquisitionType(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_acquisitionType_write);
	m_acquisitionType = attr_acquisitionType_write;

	if (m_acquisitionType == "SYNC")
	{
        m_camera->setAcquisitionType(lima::Xpad::Camera::SYNC);
	}
    	else if (m_acquisitionType == "ASYNC")
	{
        	m_camera->setAcquisitionType(lima::Xpad::Camera::ASYNC);
		if(m_from_init_device == false)
		{
			//- reapply the enableGeometricalCorrection to set the good size in Lima
			Tango::WAttribute &enablegeomcorr_wattr = dev_attr->get_w_attr_by_name("enableGeometricalCorrection");
			enablegeomcorr_wattr.set_write_value(attr_enableGeometricalCorrection_write);
			write_enableGeometricalCorrection(enablegeomcorr_wattr);
		}
		else
			m_from_init_device = false;
		
	}
	else
		Tango::Except::throw_exception(
					static_cast<const char*> ("TANGO_DEVICE_ERROR"),
					static_cast<const char*> ("Possible values for acquisitionType are: \n- SYNC\n- ASYNC"),
					static_cast<const char*> ("XpadPixelDetector::write_acquisitionType"));
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_enableGeometricalCorrection
// 
// description : 	Extract real attribute values for enableGeometricalCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_enableGeometricalCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_enableGeometricalCorrection(Tango::Attribute &attr) entering... "<< endl;

    if((m_xpad_model != "IMXPAD_S540") || (m_acquisitionType != "ASYNC"))
		attr.set_quality(Tango::ATTR_INVALID);
	else
		attr.set_value(&attr_enableGeometricalCorrection_write);	
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_enableGeometricalCorrection
// 
// description : 	Write enableGeometricalCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_enableGeometricalCorrection(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_enableGeometricalCorrection(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
		if((m_xpad_model != "IMXPAD_S540") || (m_acquisitionType != "ASYNC"))
			attr.set_quality(Tango::ATTR_INVALID);
		else
		{
			AcqMode acq_mode = Single;
			m_ct->acquisition()->getAcqMode(acq_mode);
			if(acq_mode == Accumulation)
			{
				Tango::Except::throw_exception(
						static_cast<const char*> ("TANGO_DEVICE_ERROR"),
						static_cast<const char*> ("Geometrical Correction is not available in Accumulation Mode"),
						static_cast<const char*> ("XpadPixelDetector::write_enableGeometricalCorrection"));
			} 

			attr.get_write_value(attr_enableGeometricalCorrection_write);
			
			//- enable the corr
			m_camera->setGeomCorrection(attr_enableGeometricalCorrection_write);

			//- Reapply the Max ROI
			Size size;
			m_ct->image()->getMaxImageSize(size);
			Bin bin;
			m_ct->image()->getBin(bin);
			Roi roi(Point(0, 0), Size(size.getWidth() / bin.getX(), size.getHeight() / bin.getY()));
			m_ct->image()->setRoi(roi);
		}
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(
					static_cast<const char*> ("TANGO_DEVICE_ERROR"),
					static_cast<const char*> (e.getErrMsg().c_str()),
					static_cast<const char*> ("XpadPixelDetector::write_enableGeometricalCorrection"));
	}
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_busyOut
// 
// description : 	Extract real attribute values for busyOut acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_busyOut(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_busyOut(Tango::Attribute &attr) entering... "<< endl;

    //- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_busyOut
// 
// description : 	Write busyOut attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_busyOut(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_busyOut(Tango::WAttribute &attr) entering... "<< endl;

    attr.get_write_value(attr_busyOut_write);
	m_camera->setBusyOutSel(attr_busyOut_write);
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_dacl
// 
// description : 	Extract real attribute values for dacl acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_dacl(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_dacl(Tango::Attribute &attr) entering... "<< endl;

    //- TODO
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_ithl
// 
// description : 	Extract real attribute values for ithl acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_ithl(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_ithl(Tango::Attribute &attr) entering... "<< endl;

    //- TODO
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_gp1
// 
// description : 	Extract real attribute values for gp1 acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_gp1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_gp1(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_gp1
// 
// description : 	Write gp1 attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_gp1(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_gp1(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_gp1_write);
	set_general_purpose_params();
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_gp2
// 
// description : 	Extract real attribute values for gp2 acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_gp2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_gp2(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_gp2
// 
// description : 	Write gp2 attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_gp2(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_gp2(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_gp2_write);
	set_general_purpose_params();
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_gp3
// 
// description : 	Extract real attribute values for gp3 acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_gp3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_gp3(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_gp3
// 
// description : 	Write gp3 attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_gp3(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_gp3(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_gp3_write);
	set_general_purpose_params();
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_gp4
// 
// description : 	Extract real attribute values for gp4 acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_gp4(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_gp4(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_gp4
// 
// description : 	Write gp4 attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_gp4(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_gp4(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_gp4_write);
	set_general_purpose_params();
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_init
// 
// description : 	Extract real attribute values for init acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_init(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_init(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_init
// 
// description : 	Write init attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_init(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_init(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_init_write);
	m_camera->setInitTime(attr_init_write);
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_shutter
// 
// description : 	Extract real attribute values for shutter acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_shutter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_shutter(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_shutter
// 
// description : 	Write shutter attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_shutter(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_shutter(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_shutter_write);
	m_camera->setShutterTime(attr_shutter_write);
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_ovf
// 
// description : 	Extract real attribute values for ovf acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_ovf(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_ovf(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_ovf
// 
// description : 	Write ovf attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_ovf(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_ovf(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_ovf_write);
	try
	{
		m_camera->setOverflowTime(attr_ovf_write);
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(
					static_cast<const char*> ("TANGO_DEVICE_ERROR"),
					static_cast<const char*> (e.getErrMsg().c_str()),
					static_cast<const char*> ("XpadPixelDetector::write_ovf"));
	}
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_n
// 
// description : 	Extract real attribute values for n acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_n(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_n(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_n
// 
// description : 	Write n attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_n(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_n(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_n_write);
	m_camera->setNParameter(attr_n_write);
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::read_p
// 
// description : 	Extract real attribute values for p acquisition result.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::read_p(Tango::Attribute &attr)
{
	DEBUG_STREAM << "XpadPixelDetector::read_p(Tango::Attribute &attr) entering... "<< endl;

	//- NOTHING: WRITE_ONLY Attribute !!
}

//+----------------------------------------------------------------------------
//
// method : 		XpadPixelDetector::write_p
// 
// description : 	Write p attribute values to hardware.
//
//-----------------------------------------------------------------------------
void XpadPixelDetector::write_p(Tango::WAttribute &attr)
{
	INFO_STREAM << "XpadPixelDetector::write_p(Tango::WAttribute &attr) entering... "<< endl;

	attr.get_write_value(attr_p_write);
	m_camera->setPParameter(attr_p_write);
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::load_flat_config
 *
 *	description:	method to execute "LoadFlatConfig"
 *	Load a Flat value to all pixels
 *
 * @param	argin	Flat value to be loaded
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::load_flat_config(Tango::DevULong argin)
{
	INFO_STREAM << "XpadPixelDetector::load_flat_config(): entering... !" << endl;

	//	Add your own code to control device here

	try
	{
		m_camera->loadFlatConfig(argin);
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		Tango::Except::throw_exception(
					static_cast<const char*> ("TANGO_DEVICE_ERROR"),
					static_cast<const char*> (e.getErrMsg().c_str()),
					static_cast<const char*> ("XpadPixelDetector::load_flat_config"));
	}
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState XpadPixelDetector::dev_state()
{
    Tango::DevState    argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "XpadPixelDetector::dev_state(): entering... !" << endl;
    //    Add your own code to control device here

    stringstream    DeviceStatus;
    DeviceStatus     << "";
    Tango::DevState DeviceState    = Tango::STANDBY;
    if(!m_is_device_initialized )
    {
        DeviceState            = Tango::FAULT;
        DeviceStatus        << m_status_message.str();
    }
    else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();		
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
}


//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::save_config_l
 *
 *	description:	method to execute "SaveConfigL"
 *	?
 *
 * @param	argin	modNum(1..8), calibId(0..6), chipId(0..7), curRow (0..119), values (80 values)
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::save_config_l(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::save_config_l(): entering... !" << endl;

	//	Add your own code to control device here

    //- argin length doit etre de taille 4 + 80 = 84
    if(argin->length()!= 84)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
                    static_cast<const char*> ("The size of the argin paramater is not good: there should be 84 values (4+80)"),
                    static_cast<const char*> ("XpadPixelDetector::save_config_l"));
    }

    try
    {
        m_camera->saveConfigL((*argin)[0],(*argin)[1],(*argin)[2],(*argin)[3],(unsigned long*) &((*argin)[4]));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::save_config_l"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::save_config_g
 *
 *	description:	method to execute "SaveConfigG"
 *	?
 *
 * @param	argin	modNum(1..8), calibId(0..6), reg, values (7 values)
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::save_config_g(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::save_config_g(): entering... !" << endl;

	//	Add your own code to control device here

    //- argin length doit etre de taille: 3 + 11 = 14
    if(argin->length()!= 14)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
					static_cast<const char*> ("The size of the argin paramater is not good: there should be 14 values (3+11):\nmodNum(1..8), calibId(0..6), reg, values (7 values)"),
                    static_cast<const char*> ("XpadPixelDetector::save_config_g"));
    }

    try
    {
        m_camera->saveConfigG((*argin)[0],(*argin)[1],(*argin)[2],(unsigned long*) &((*argin)[3]));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::save_config_g"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::load_config
 *
 *	description:	method to execute "LoadConfig"
 *	?
 *
 * @param	argin	modNum(1..8), calibId(0..6)
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::load_config(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::load_config(): entering... !" << endl;

	//	Add your own code to control device here

    if(argin->length()!= 2)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
					static_cast<const char*> ("The size of the argin paramater is not good: there should be 2 values:\nmodNum(1..8), calibId(0..6)"),
                    static_cast<const char*> ("XpadPixelDetector::load_config"));
    }

    try
    {
        m_camera->loadConfig((*argin)[0],(*argin)[1]);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::load_config"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::load_config_g
 *
 *	description:	method to execute "LoadConfigG"
 *	Load a value of a wanted config G register.
 *	register IDs are:
 *	CMOS_DSBL_V32  0x01
 *	AMP_TP_V32     0x1F
 *	ITHH_V32       0x33
 *	VADJ_V32       0x35
 *	VREF_V32       0x36
 *	IMFP_V32       0x3b
 *	IOTA_V32       0x3c
 *	IPRE_V32       0x3d
 *	ITHL_V32       0x3e
 *	TUNE_V32      0x3f
 *	IBUFFER_V32    0x40
 *
 * @param	argin	modNum(1..8), chipId(0..6), register ID, register value
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::load_config_g(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::load_config_g(): entering... !" << endl;

	//	Add your own code to control device here

	//- argin length doit etre de taille 4: module number, chip Id, register ID , register value
    if(argin->length()!= 4)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
					static_cast<const char*> ("The size of the argin paramater is not good: there should be 4 values:\n module number, chip Id, register ID , register value"),
					static_cast<const char*> ("XpadPixelDetector::load_config_g"));
    }
    try
    {
        m_camera->loadConfigG((*argin)[0],(*argin)[1],(*argin)[2],(*argin)[3]);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::load_config_g"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::reset
 *
 *	description:	method to execute "Reset"
 *	Reset the Xpad
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::reset()
{
	INFO_STREAM << "XpadPixelDetector::reset(): entering... !" << endl;

	//	Add your own code to control device here

    try
    {
        m_camera->reset();
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::reset"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::load_all_config_g
 *
 *	description:	method to execute "LoadAllConfigG"
 *	Load the config G(lobal) to a module and a chip
 *
 * @param	argin	modNum(1..8), chipId(0..6), config_values (11 values)
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::load_all_config_g(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::load_all_config_g(): entering... !" << endl;

	//	Add your own code to control device here

    //- argin length doit etre de taille: 2 + 11 = 13
    if(argin->length()!= 13)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
                    static_cast<const char*> ("The size of the argin paramater is not good: there should be 13 values (2+11)"),
                    static_cast<const char*> ("XpadPixelDetector::load_all_config_g"));
    }
    try
    {
        m_camera->loadAllConfigG((*argin)[0],(*argin)[1],(unsigned long*) &((*argin)[2]));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::load_all_config_g"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::calibrate_otnslow
 *
 *	description:	method to execute "CalibrateOTNSlow"
 *	Start the Over The Noise Slow calibration
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::calibrate_otnslow()
{
	INFO_STREAM << "XpadPixelDetector::calibrate_otnslow(): entering... !" << endl;

	//	Add your own code to control device here

    try
    {
        m_camera->calibrateOTNSlow(calibrationPath);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_otnslow"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::calibrate_otnmedium
 *
 *	description:	method to execute "CalibrateOTNMedium"
 *	Start the Over The Noise Medium calibration
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::calibrate_otnmedium()
{
	INFO_STREAM << "XpadPixelDetector::calibrate_otnmedium(): entering... !" << endl;

	//	Add your own code to control device here

	try
    {
        m_camera->calibrateOTNMedium(calibrationPath);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_otnmedium"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::calibrate_otnfast
 *
 *	description:	method to execute "CalibrateOTNFast"
 *	Start the Over The Noise Fast calibration
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::calibrate_otnfast()
{
	INFO_STREAM << "XpadPixelDetector::calibrate_otnfast(): entering... !" << endl;

	//	Add your own code to control device here

	try
    {
        m_camera->calibrateOTNFast(calibrationPath);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_otnfast"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::calibrate_beam
 *
 *	description:	method to execute "CalibrateBEAM"
 *	Start the BEAM calibration
 *
 * @param	argin	Texp, ithl_max, itune, imfp
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::calibrate_beam(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::calibrate_beam(): entering... !" << endl;

	//	Add your own code to control device here

	//- argin length doit etre de taille 4: texp, ithl_max, itune , imfp
    if(argin->length()!= 4)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
					static_cast<const char*> ("Wrong number of parameters: should be 4: texp, ithl_max, itune , imfp"),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_beam"));
    }
    
	try
    {
        m_camera->calibrateBeam(calibrationPath,(*argin)[0],(*argin)[1],(*argin)[2],(*argin)[3]);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_beam"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::calibrate_otn
 *
 *	description:	method to execute "CalibrateOTN"
 *	Start the Over The Noise calibration
 *
 * @param	argin	itune, imfp
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::calibrate_otn(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::calibrate_otn(): entering... !" << endl;

	//	Add your own code to control device here

	//- argin length doit etre de taille 4: itune , imfp
    if(argin->length()!= 2)
    {
        Tango::Except::throw_exception(
                    static_cast<const char*> ("PARAMETER_ERROR"),
					static_cast<const char*> ("Wrong number of parameters: should be 2: itune , imfp"),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_otn"));
    }
    
	try
    {
        m_camera->calibrateOTN(calibrationPath,(*argin)[0],(*argin)[1]);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::calibrate_otn"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::upload_calibration
 *
 *	description:	method to execute "UploadCalibration"
 *	Upload a calibration from a directory defined in the property CalibrationPath
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::upload_calibration()
{
	INFO_STREAM << "XpadPixelDetector::upload_calibration(): entering... !" << endl;

	//	Add your own code to control device here

    try
    {
        m_camera->uploadCalibration(calibrationPath);
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::upload_calibration"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::upload_wait_times
 *
 *	description:	method to execute "UploadWaitTimes"
 *	Upload a tralectory of wait times, instead of having always the same value
 *
 * @param	argin	the wait times
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::upload_wait_times(const Tango::DevVarULongArray *argin)
{
	INFO_STREAM << "XpadPixelDetector::upload_wait_times(): entering... !" << endl;

	//	Add your own code to control device here

	Tango::Except::throw_exception(
                    static_cast<const char*> ("NOT_SUPPORTED_FEATURE"),
                    static_cast<const char*> ("The UploadWaitTimes command is not yet supported"),
                    static_cast<const char*> ("XpadPixelDetector::upload_wait_times"));

    //- TODO: recuperer le nbre d'image de la sequence et le comparer avec argin
    try
    {
        //- FL: What about the deadtime (Twait) 
		m_camera->uploadExpWaitTimes((unsigned long*) &((*argin)[0]),argin->length());
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::upload_wait_times"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::increment_ithl
 *
 *	description:	method to execute "IncrementITHL"
 *	Increment the ITHL of 1 unit
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::increment_ithl()
{
	INFO_STREAM << "XpadPixelDetector::increment_ithl(): entering... !" << endl;

	//	Add your own code to control device here

    try
    {
        m_camera->incrementITHL();
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::increment_ithl"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::decrement_ithl
 *
 *	description:	method to execute "DecrementITHL"
 *	Decrement the ITHL of 1 unit
 *
 *
 */
//+------------------------------------------------------------------
void XpadPixelDetector::decrement_ithl()
{
	INFO_STREAM << "XpadPixelDetector::decrement_ithl(): entering... !" << endl;

	//	Add your own code to control device here

    try
    {
        m_camera->decrementITHL();
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::decrement_ithl"));
    }
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::get_dacl
 *
 *	description:	method to execute "GetDacl"
 *
 * @return	array of DACL data
 *
 */
//+------------------------------------------------------------------
Tango::DevVarUShortArray *XpadPixelDetector::get_dacl()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevVarUShortArray	*argout  = new Tango::DevVarUShortArray();
	argout->length(1);
	(*argout)[0] = 0;
	DEBUG_STREAM << "XpadPixelDetector::get_dacl(): entering... !" << endl;

	//	Add your own code to control device here

	Tango::Except::throw_exception(
                    static_cast<const char*> ("NOT_SUPPORTED_FEATURE"),
                    static_cast<const char*> ("The GetDacl command is not yet supported"),
                    static_cast<const char*> ("XpadPixelDetector::get_dacl"));

    try
    {
        //- get the DACLs size, which is the same size of the image
        HwDetInfoCtrlObj *hw_det_info;
        m_hw->getHwCtrlObj(hw_det_info);
        Size image_size;
        hw_det_info->getDetectorImageSize(image_size);
    
        cout << "########### 1 "<<endl;
        //- resize the argout
        argout->length(image_size.getWidth() * image_size.getHeight());

        cout << "########### 2 "<<endl;

        //- Get the DACLs
        unsigned short*& dacl = m_camera->getModConfig();

        cout << "########### 3 "<<endl;

        //(*argout) = dacl;

        //- store input data in attribute Theta2Constants
	    for (int i = 0;i < argout->length(); i++)
	    {
            cout << "dacl # " << i << "= " << dacl[i];
	    }
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("XpadPixelDetector::get_mod_config"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        Tango::Except::throw_exception(
                    static_cast<const char*> ("LIMA_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("XpadPixelDetector::get_mod_config"));
    }

	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	XpadPixelDetector::get_ithl
 *
 *	description:	method to execute "GetIthl"
 *
 * @return	array of ITHL data
 *
 */
//+------------------------------------------------------------------
Tango::DevVarUShortArray *XpadPixelDetector::get_ithl()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevVarUShortArray	*argout  = new Tango::DevVarUShortArray();
	argout->length(1);
	(*argout)[0] = 0;
	DEBUG_STREAM << "XpadPixelDetector::get_ithl(): entering... !" << endl;

	//	Add your own code to control device here

	return argout;
}

/*-------------------------------------------------------------------------
//       XpadPixelDetector::set_general_purpose_params
/-------------------------------------------------------------------------*/
void XpadPixelDetector::set_general_purpose_params()
{
	m_camera->setGeneralPurposeParams(attr_gp1_write,attr_gp2_write,attr_gp3_write,attr_gp4_write);

}










}	//	namespace
