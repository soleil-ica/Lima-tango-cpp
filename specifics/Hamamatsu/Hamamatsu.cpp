static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         Hamamatsu.cpp
//
// description :  C++ source for the Hamamatsu and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Hamamatsu are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name      |  Method name
//	----------------------------------------
//  State             |  dev_state()
//  Status            |  dev_status()
//  GetAllParameters  |  get_all_parameters()
//  GetParameter      |  get_parameter()
//  SetParameter      |  set_parameter()
//
//===================================================================


#include "tango.h"
#include <PogoHelper.h>
#include <Hamamatsu.h>
#include <HamamatsuClass.h>
#include <string> 

#define MAX_ATTRIBUTE_STRING_LENGTH 256
#define READOUTSPEED_NORMAL_VALUE		2
#define READOUTSPEED_SLOW_VALUE			1
#define READOUTSPEED_NORMAL_NAME	"NORMAL"
#define READOUTSPEED_SLOW_NAME		"SLOW"

#define SYNCREADOUT_BLANKMODE_STANDARD	"STANDARD"
#define SYNCREADOUT_BLANKMODE_MINIMUM	"MINIMUM"

#define CHANNEL_1 0
#define CHANNEL_2 1
#define CHANNEL_3 2 


namespace Hamamatsu_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::Hamamatsu(string &s)
//
// description : 	constructor for simulated Hamamatsu
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------
Hamamatsu::Hamamatsu(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str()), m_dim(this)
{
	init_device();
}

Hamamatsu::Hamamatsu(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s), m_dim(this)
{
	init_device();
}

Hamamatsu::Hamamatsu(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d), m_dim(this)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::delete_device()
//
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Hamamatsu::delete_device()
{
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());

    INFO_STREAM << "==============================================================" << endl;
    INFO_STREAM << "Starting delete_device." << endl;

    INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);

    // Release dynamic attributes
    release_dynamics_attributes();

    INFO_STREAM << "- Delete device allocated objects." << endl;

    //	Delete device allocated objects
	DELETE_SCALAR_ATTRIBUTE(attr_lostFrames_read);
	DELETE_SCALAR_ATTRIBUTE(attr_fps_read);
    DELETE_SCALAR_ATTRIBUTE(attr_wViewEnabled_read);
	DELETE_SCALAR_ATTRIBUTE(attr_topViewExposureTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_bottomViewExposureTime_read);

    DELETE_SCALAR_ATTRIBUTE(attr_dyn_temperature_read);
    DELETE_SCALAR_ATTRIBUTE(attr_dyn_highDynamicRangeEnabled_read);

	DELETE_DEVSTRING_ATTRIBUTE(attr_dyn_coolerMode_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_dyn_coolerStatus_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_dyn_temperatureStatus_read);
	DELETE_DEVSTRING_ATTRIBUTE(attr_dyn_readoutSpeed_read);

   DELETE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerKind_read);
   DELETE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerKind_read);
   DELETE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerKind_read);

   DELETE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerPolarity_read);
   DELETE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerPolarity_read);
   DELETE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerPolarity_read);

   if (m_camera->isOrcaQuest())
   {
        delete_orcaQuest_device();
   }
}

void Hamamatsu::delete_orcaQuest_device()
{
	DELETE_SCALAR_ATTRIBUTE(attr_sensorMode_read);
	DELETE_SCALAR_ATTRIBUTE(attr_pixelType_read);
	
    DELETE_SCALAR_ATTRIBUTE(attr_inputTriggerActive_read);

    DELETE_SCALAR_ATTRIBUTE(attr_inputTriggerPolarity_read);

    DELETE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerDelay_read);
    DELETE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerDelay_read);
    DELETE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerDelay_read);

    DELETE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerSource_read);
    DELETE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerSource_read);
    DELETE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerSource_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::init_device()
//
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Hamamatsu::init_device()
{
    INFO_STREAM << "==============================================================" << endl;
    INFO_STREAM << "Starting init_device." << endl;

    INFO_STREAM << "Hamamatsu::Hamamatsu() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------
    get_device_property();

    CREATE_SCALAR_ATTRIBUTE(attr_lostFrames_read);
    CREATE_SCALAR_ATTRIBUTE(attr_fps_read);
    CREATE_SCALAR_ATTRIBUTE(attr_wViewEnabled_read);
    CREATE_SCALAR_ATTRIBUTE(attr_topViewExposureTime_read);
    CREATE_SCALAR_ATTRIBUTE(attr_bottomViewExposureTime_read);

    CREATE_SCALAR_ATTRIBUTE(attr_dyn_temperature_read);
    CREATE_SCALAR_ATTRIBUTE(attr_dyn_highDynamicRangeEnabled_read);

    CREATE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerKind_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerKind_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerKind_read);

    CREATE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerPolarity_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerPolarity_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerPolarity_read);

    CREATE_DEVSTRING_ATTRIBUTE(attr_dyn_coolerMode_read       , MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_dyn_coolerStatus_read     , MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_dyn_temperatureStatus_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_dyn_readoutSpeed_read     , MAX_ATTRIBUTE_STRING_LENGTH);

    m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");

    INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());

    try
    {
        //- get the main object used to pilot the lima framework		
        m_ct = ControlFactory::instance().get_control("Hamamatsu");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Hamamatsu::Interface*>(m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

        // ICATHALES-587
        if (m_camera->isOrcaQuest())
        {
            create_orcaQuest_attributes();
        }

        // Create dynamic attributes
        create_dynamics_attributes();

        // flag needs to be activated to be able to initialize the dynamic attributes
        m_is_device_initialized = true;

        // Update the hardware with the properties data
        write_at_init();
    }
    catch(lima::Exception& e)
    {
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (yat::Exception& ex)
    {
        m_status_message << "Initialization Failed : " << ex.errors[0].desc << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (Tango::DevFailed& df)
    {
        m_status_message << "Initialization Failed : " << df.errors[0].desc << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch(...)
    {
        m_status_message << "Initialization Failed : Unknown error" << endl;
        ERROR_STREAM << m_status_message.str() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }

    set_state(Tango::STANDBY);
    dev_state();
}

void Hamamatsu::create_orcaQuest_attributes()
{
	CREATE_SCALAR_ATTRIBUTE(attr_sensorMode_read);
	CREATE_SCALAR_ATTRIBUTE(attr_pixelType_read);
	
    CREATE_SCALAR_ATTRIBUTE(attr_inputTriggerActive_read);
    CREATE_SCALAR_ATTRIBUTE(attr_inputTriggerPolarity_read);

    CREATE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerDelay_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerDelay_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerDelay_read);

    CREATE_SCALAR_ATTRIBUTE(attr_channel1OutputTriggerSource_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel2OutputTriggerSource_read);
    CREATE_SCALAR_ATTRIBUTE(attr_channel3OutputTriggerSource_read);
}

/*****************************************************************************
 * \brief Update the hardware with the properties data
 *****************************************************************************/
void Hamamatsu::write_at_init(void)
{
    INFO_STREAM << "- Update the hardware with the properties" << endl;

    //------------------------------------------------------------------------------
    // Readout Speed (not used for ORCA Lightning)
    //------------------------------------------------------------------------------
    if(m_camera->isReadoutSpeedSupported())
    {
        write_property_in_dynamic_string_attribute<Tango::DevString>("readoutSpeed", "MemorizedReadoutSpeed", &Hamamatsu::write_readoutSpeed_callback);
    }

    //------------------------------------------------------------------------------
    // Synchronous readout blank mode
    //------------------------------------------------------------------------------
	INFO_STREAM << "Write tango hardware at Init - BlankOfSyncreadoutTrigger." << endl;

	transform(blankOfSyncreadoutTrigger.begin(), blankOfSyncreadoutTrigger.end(), blankOfSyncreadoutTrigger.begin(), ::toupper);

    if (blankOfSyncreadoutTrigger != SYNCREADOUT_BLANKMODE_STANDARD &&
        blankOfSyncreadoutTrigger != SYNCREADOUT_BLANKMODE_MINIMUM)
	{			
		string user_msg;
        user_msg = string("Available Synchronous Readout blank modes are:\n- ") + string(SYNCREADOUT_BLANKMODE_STANDARD) + string("\n- ") + string(SYNCREADOUT_BLANKMODE_MINIMUM);

        Tango::Except::throw_exception(	"CONFIGURATION_ERROR",
                                        user_msg.c_str(),
                                        "Hamamatsu::init_device");
	}

    m_sync_readout_blank_mode = lima::Hamamatsu::Camera::SyncReadOut_BlankMode_Standard;

    if (blankOfSyncreadoutTrigger == SYNCREADOUT_BLANKMODE_STANDARD)
        m_sync_readout_blank_mode = lima::Hamamatsu::Camera::SyncReadOut_BlankMode_Standard;
    else
    if (blankOfSyncreadoutTrigger == SYNCREADOUT_BLANKMODE_MINIMUM)
        m_sync_readout_blank_mode = lima::Hamamatsu::Camera::SyncReadOut_BlankMode_Minimum;
	
	m_camera->setSyncReadoutBlankMode(m_sync_readout_blank_mode);

    //------------------------------------------------------------------------------
    // Top View & Bottom View Exposure Times
    //------------------------------------------------------------------------------
    m_top_view_exposure_time    = memorizedTopViewExposureTime   ;
    m_bottom_view_exposure_time = memorizedBottomViewExposureTime;

    //------------------------------------------------------------------------------
    // W-View Mode
    //------------------------------------------------------------------------------
	INFO_STREAM << "Write tango hardware at Init - wViewEnabled." << endl;
	Tango::WAttribute &wiewMode = dev_attr->get_w_attr_by_name("wViewEnabled");
	m_wView_enabled = memorizedWViewEnabled;
    *attr_wViewEnabled_read = m_wView_enabled;
	wiewMode.set_write_value(m_wView_enabled);
	write_wViewEnabled(wiewMode);

    //------------------------------------------------------------------------------
    // Top View Exposure Time
    //------------------------------------------------------------------------------
    INFO_STREAM << "Write tango hardware at Init - topViewExposureTime." << endl;
    Tango::WAttribute &topViewExposure = dev_attr->get_w_attr_by_name("topViewExposureTime");
    *attr_topViewExposureTime_read = m_top_view_exposure_time;
    topViewExposure.set_write_value(m_top_view_exposure_time);

    //------------------------------------------------------------------------------
    // Bottom View Exposure Time
    //------------------------------------------------------------------------------
    INFO_STREAM << "Write tango hardware at Init - bottomViewExposureTime." << endl;
    Tango::WAttribute &bottomViewExposure = dev_attr->get_w_attr_by_name("bottomViewExposureTime");
    *attr_bottomViewExposureTime_read = m_bottom_view_exposure_time;
    bottomViewExposure.set_write_value(m_bottom_view_exposure_time);

    //------------------------------------------------------------------------------
    // High dynamic range activation (used for ORCA Lightning)
    // Scan Mode

    if(m_camera->isHighDynamicRangeSupported())
    {
        write_property_in_dynamic_attribute<Tango::DevBoolean>("highDynamicRangeEnabled", "MemorizedHighDynamicRangeEnabled", &Hamamatsu::write_highDynamicRangeEnabled_callback);
    }

    //------------------------------------------------------------------------------
    // ICATHALES-587 : Input triggers Active and Polarity
    //------------------------------------------------------------------------------
	m_raise_ex = false;
    // Sensor Mode
    INFO_STREAM << "Write tango hardware at Init - sensorMode." << endl;
    Tango::WAttribute &sensorMode = dev_attr->get_w_attr_by_name("sensorMode");
    attr_sensorMode_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "sensorMode", 1);
    sensorMode.set_write_value(attr_sensorMode_write);
    write_sensorMode(sensorMode);

	// Pixel Type
    INFO_STREAM << "Write tango hardware at Init - pixelType." << endl;
    Tango::WAttribute &pixelType = dev_attr->get_w_attr_by_name("pixelType");
    attr_pixelType_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "pixelType", 1);
    pixelType.set_write_value(attr_pixelType_write);
    write_pixelType(pixelType);
	
    // IT Active
    INFO_STREAM << "Write tango hardware at Init - inputTriggerActive." << endl;
    Tango::WAttribute &inputTriggerActive = dev_attr->get_w_attr_by_name("inputTriggerActive");
    attr_inputTriggerActive_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "inputTriggerActive", 1);
    inputTriggerActive.set_write_value(attr_inputTriggerActive_write);
    write_inputTriggerActive(inputTriggerActive);

    // IT Polarity
    INFO_STREAM << "Write tango hardware at Init - inputTriggerPolarity." << endl;
    Tango::WAttribute &inputTriggerPolarity = dev_attr->get_w_attr_by_name("inputTriggerPolarity");
    attr_inputTriggerPolarity_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "inputTriggerPolarity", 1);
    inputTriggerPolarity.set_write_value(attr_inputTriggerPolarity_write);
    write_inputTriggerPolarity(inputTriggerPolarity);

    //------------------------------------------------------------------------------
    // Output triggers Polarities and Kinds
    //------------------------------------------------------------------------------
    INFO_STREAM << "Write tango hardware at Init - channel1OutputTriggerPolarity." << endl;
    Tango::WAttribute &channel1OutputTriggerPolarity = dev_attr->get_w_attr_by_name("channel1OutputTriggerPolarity");
    attr_channel1OutputTriggerPolarity_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel1OutputTriggerPolarity", 1);
    channel1OutputTriggerPolarity.set_write_value(attr_channel1OutputTriggerPolarity_write);
    write_channel1OutputTriggerPolarity(channel1OutputTriggerPolarity);

    INFO_STREAM << "Write tango hardware at Init - channel2OutputTriggerPolarity." << endl;
    Tango::WAttribute &channel2OutputTriggerPolarity = dev_attr->get_w_attr_by_name("channel2OutputTriggerPolarity");
    attr_channel2OutputTriggerPolarity_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel2OutputTriggerPolarity", 1);
    channel2OutputTriggerPolarity.set_write_value(attr_channel2OutputTriggerPolarity_write);
    write_channel2OutputTriggerPolarity(channel2OutputTriggerPolarity);

    INFO_STREAM << "Write tango hardware at Init - channel3OutputTriggerPolarity." << endl;
    Tango::WAttribute &channel3OutputTriggerPolarity = dev_attr->get_w_attr_by_name("channel3OutputTriggerPolarity");
    attr_channel3OutputTriggerPolarity_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel3OutputTriggerPolarity", 1);
    channel3OutputTriggerPolarity.set_write_value(attr_channel3OutputTriggerPolarity_write);
    write_channel3OutputTriggerPolarity(channel3OutputTriggerPolarity);

    INFO_STREAM << "Write tango hardware at Init - channel1OutputTriggerKind." << endl;
    Tango::WAttribute &channel1OutputTriggerKind = dev_attr->get_w_attr_by_name("channel1OutputTriggerKind");
    attr_channel1OutputTriggerKind_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel1OutputTriggerKind", 1);
    channel1OutputTriggerKind.set_write_value(attr_channel1OutputTriggerKind_write);
    write_channel1OutputTriggerKind(channel1OutputTriggerKind);

    INFO_STREAM << "Write tango hardware at Init - channel2OutputTriggerKind." << endl;
    Tango::WAttribute &channel2OutputTriggerKind = dev_attr->get_w_attr_by_name("channel2OutputTriggerKind");
    attr_channel2OutputTriggerKind_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel2OutputTriggerKind", 1);
    channel2OutputTriggerKind.set_write_value(attr_channel2OutputTriggerKind_write);
    write_channel2OutputTriggerKind(channel2OutputTriggerKind);

    INFO_STREAM << "Write tango hardware at Init - channel3OutputTriggerKind." << endl;
    Tango::WAttribute &channel3OutputTriggerKind = dev_attr->get_w_attr_by_name("channel3OutputTriggerKind");
    attr_channel3OutputTriggerKind_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel3OutputTriggerKind", 1);
    channel3OutputTriggerKind.set_write_value(attr_channel3OutputTriggerKind_write);
    write_channel3OutputTriggerKind(channel3OutputTriggerKind);

    // ICATHALES-587 : OutputT Trigger Delay and Source
    INFO_STREAM << "Write tango hardware at Init - channel1OutputTriggerDelay." << endl;
    Tango::WAttribute &channel1OutputTriggerDelay = dev_attr->get_w_attr_by_name("channel1OutputTriggerDelay");
    attr_channel1OutputTriggerDelay_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevDouble>(this, "channel1OutputTriggerDelay", 1);
    channel1OutputTriggerDelay.set_write_value(attr_channel1OutputTriggerDelay_write);
    write_channel1OutputTriggerDelay(channel1OutputTriggerDelay);

    INFO_STREAM << "Write tango hardware at Init - channel2OutputTriggerDelay." << endl;
    Tango::WAttribute &channel2OutputTriggerDelay = dev_attr->get_w_attr_by_name("channel2OutputTriggerDelay");
    attr_channel2OutputTriggerDelay_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevDouble>(this, "channel2OutputTriggerDelay", 1);
    channel2OutputTriggerDelay.set_write_value(attr_channel2OutputTriggerDelay_write);
    write_channel2OutputTriggerDelay(channel2OutputTriggerDelay);

    INFO_STREAM << "Write tango hardware at Init - channel3OutputTriggerDelay." << endl;
    Tango::WAttribute &channel3OutputTriggerDelay = dev_attr->get_w_attr_by_name("channel3OutputTriggerDelay");
    attr_channel3OutputTriggerDelay_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevDouble>(this, "channel3OutputTriggerDelay", 1);
    channel3OutputTriggerDelay.set_write_value(attr_channel3OutputTriggerDelay_write);
    write_channel3OutputTriggerDelay(channel3OutputTriggerDelay);

    INFO_STREAM << "Write tango hardware at Init - channel1OutputTriggerSource." << endl;
    Tango::WAttribute &channel1OutputTriggerSource = dev_attr->get_w_attr_by_name("channel1OutputTriggerSource");
    attr_channel1OutputTriggerSource_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel1OutputTriggerSource", 1);
    channel1OutputTriggerSource.set_write_value(attr_channel1OutputTriggerSource_write);
    write_channel1OutputTriggerSource(channel1OutputTriggerSource);

    INFO_STREAM << "Write tango hardware at Init - channel2OutputTriggerSource." << endl;
    Tango::WAttribute &channel2OutputTriggerSource = dev_attr->get_w_attr_by_name("channel2OutputTriggerSource");
    attr_channel2OutputTriggerSource_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel2OutputTriggerSource", 1);
    channel2OutputTriggerSource.set_write_value(attr_channel2OutputTriggerSource_write);
    write_channel2OutputTriggerSource(channel2OutputTriggerSource);

    INFO_STREAM << "Write tango hardware at Init - channel3OutputTriggerSource." << endl;
    Tango::WAttribute &channel3OutputTriggerSource = dev_attr->get_w_attr_by_name("channel3OutputTriggerSource");
    attr_channel3OutputTriggerSource_write = yat4tango::PropertyHelper::get_memorized_attribute<Tango::DevUShort>(this, "channel3OutputTriggerSource", 1);
    channel3OutputTriggerSource.set_write_value(attr_channel3OutputTriggerSource_write);
    write_channel3OutputTriggerSource(channel3OutputTriggerSource);
	
	m_raise_ex = true;
}

/*****************************************************************************
 * \brief Create all dynamics attributes
 *****************************************************************************/
void Hamamatsu::create_dynamics_attributes(void)
{
    INFO_STREAM << "- Create the dynamics attributes" << endl;

    if(m_camera->isReadoutSpeedSupported())
    {
        create_dynamic_attribute("readoutSpeed",
                                 Tango::DEV_STRING,
                                 Tango::SCALAR,
                                 Tango::READ_WRITE,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "",
                                 "",
                                 "Current readout speed mode (NORMAL, SLOW).",
                                 &Hamamatsu::read_readoutSpeed_callback,
                                 &Hamamatsu::write_readoutSpeed_callback,
                                 attr_dyn_readoutSpeed_read);
    }

    if(m_camera->isSensorTemperatureSupported())
    {
        create_dynamic_attribute("temperature",
                                 Tango::DEV_DOUBLE,
                                 Tango::SCALAR,
                                 Tango::READ,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "Celcius",
                                 "%.2",
                                 "Temperature of the image sensor in Celcius.",
                                 &Hamamatsu::read_temperature_callback,
                                 &Hamamatsu::write_callback_null,
                                 attr_dyn_temperature_read);
    }

    if(m_camera->isTemperatureStatusSupported())
    {
        create_dynamic_attribute("temperatureStatus",
                                 Tango::DEV_STRING,
                                 Tango::SCALAR,
                                 Tango::READ,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "",
                                 "",
                                 "Current temperature status (NOT_SUPPORTED, NORMAL, WARNING, PROTECTION).",
                                 &Hamamatsu::read_temperatureStatus_callback,
                                 &Hamamatsu::write_callback_null,
                                 attr_dyn_temperatureStatus_read);
    }

    if(m_camera->isCoolerModeSupported())
    {
        create_dynamic_attribute("coolerMode",
                                 Tango::DEV_STRING,
                                 Tango::SCALAR,
                                 Tango::READ,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "",
                                 "",
                                 "Selected cooler mode (OFF/ON/MAX/NOT_SUPPORTED).",
                                 &Hamamatsu::read_coolerMode_callback,
                                 &Hamamatsu::write_callback_null,
                                 attr_dyn_coolerMode_read);
    }

    if(m_camera->isCoolerStatusSupported())
    {
        create_dynamic_attribute("coolerStatus",
                                 Tango::DEV_STRING,
                                 Tango::SCALAR,
                                 Tango::READ,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "",
                                 "",
                                 "Current cooler status.<br>\nPossible values can be:<br>\n- inactive (NOT_SUPPORTED, NONE, OFF)<br>\n- in error (ERROR1, ERROR2, ERROR3, ERROR4)<br>\n- running (READY, BUSY, ALWAYS, WARNING)<br>",
                                 &Hamamatsu::read_coolerStatus_callback,
                                 &Hamamatsu::write_callback_null,
                                 attr_dyn_coolerStatus_read);
    }

    if(m_camera->isHighDynamicRangeSupported())
    {
        create_dynamic_attribute("highDynamicRangeEnabled",
                                 Tango::DEV_BOOLEAN,
                                 Tango::SCALAR,
                                 Tango::READ_WRITE,
                                 Tango::OPERATOR,
                                 0, // no polling
                                 "",
                                 "",
                                 "Current high dynamic range activation status.<br>False is for Standard Full Well Capacity mode.<br>True is for High Full Well Capacity mode.<br>",
                                 &Hamamatsu::read_highDynamicRangeEnabled_callback,
                                 &Hamamatsu::write_highDynamicRangeEnabled_callback,
                                 attr_dyn_highDynamicRangeEnabled_read);
    }
}

/*****************************************************************************
 * \brief Release all dynamics attributes
 *****************************************************************************/
void Hamamatsu::release_dynamics_attributes(void)
{
    INFO_STREAM << "- Remove the dynamics attributes." << endl;

    //	Delete device allocated objects
    m_dim.remove();
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::get_device_property()
//
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Hamamatsu::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DetectorNum"));
	dev_prop.push_back(Tango::DbDatum("MemorizedReadoutSpeed"));
	dev_prop.push_back(Tango::DbDatum("BlankOfSyncreadoutTrigger"));
	dev_prop.push_back(Tango::DbDatum("MemorizedTopViewExposureTime"));
	dev_prop.push_back(Tango::DbDatum("MemorizedBottomViewExposureTime"));
	dev_prop.push_back(Tango::DbDatum("MemorizedWViewEnabled"));
	dev_prop.push_back(Tango::DbDatum("MemorizedHighDynamicRangeEnabled"));
	dev_prop.push_back(Tango::DbDatum("ExpertFrameBufferSize"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	HamamatsuClass	*ds_class =
		(static_cast<HamamatsuClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize DetectorNum from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorNum;
	else {
		//	Try to initialize DetectorNum from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorNum;
	}
	//	And try to extract DetectorNum value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorNum;

	//	Try to initialize MemorizedReadoutSpeed from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedReadoutSpeed;
	else {
		//	Try to initialize MemorizedReadoutSpeed from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedReadoutSpeed;
	}
	//	And try to extract MemorizedReadoutSpeed value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedReadoutSpeed;

	//	Try to initialize BlankOfSyncreadoutTrigger from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  blankOfSyncreadoutTrigger;
	else {
		//	Try to initialize BlankOfSyncreadoutTrigger from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  blankOfSyncreadoutTrigger;
	}
	//	And try to extract BlankOfSyncreadoutTrigger value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  blankOfSyncreadoutTrigger;

	//	Try to initialize MemorizedTopViewExposureTime from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedTopViewExposureTime;
	else {
		//	Try to initialize MemorizedTopViewExposureTime from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedTopViewExposureTime;
	}
	//	And try to extract MemorizedTopViewExposureTime value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedTopViewExposureTime;

	//	Try to initialize MemorizedBottomViewExposureTime from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedBottomViewExposureTime;
	else {
		//	Try to initialize MemorizedBottomViewExposureTime from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedBottomViewExposureTime;
	}
	//	And try to extract MemorizedBottomViewExposureTime value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedBottomViewExposureTime;

	//	Try to initialize MemorizedWViewEnabled from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedWViewEnabled;
	else {
		//	Try to initialize MemorizedWViewEnabled from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedWViewEnabled;
	}
	//	And try to extract MemorizedWViewEnabled value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedWViewEnabled;

	//	Try to initialize MemorizedHighDynamicRangeEnabled from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedHighDynamicRangeEnabled;
	else {
		//	Try to initialize MemorizedHighDynamicRangeEnabled from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedHighDynamicRangeEnabled;
	}
	//	And try to extract MemorizedHighDynamicRangeEnabled value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedHighDynamicRangeEnabled;

	//	Try to initialize ExpertFrameBufferSize from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  expertFrameBufferSize;
	else {
		//	Try to initialize ExpertFrameBufferSize from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  expertFrameBufferSize;
	}
	//	And try to extract ExpertFrameBufferSize value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  expertFrameBufferSize;



	//	End of Automatic code generation
	//------------------------------------------------------------------
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "0", "DetectorNum");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "NORMAL", "MemorizedReadoutSpeed");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, SYNCREADOUT_BLANKMODE_STANDARD, "BlankOfSyncreadoutTrigger");

	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "false", "MemorizedWViewEnabled"          );
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1000" , "MemorizedTopViewExposureTime"   );
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "1000" , "MemorizedBottomViewExposureTime");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "false", "MemorizedHighDynamicRangeEnabled");

    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "10", "ExpertFrameBufferSize");
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::always_executed_hook()
//
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Hamamatsu::always_executed_hook()
{
    try
    {
        yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
        // During Device initialization we do not empty m_status_message (status handler) to be able to display
        // status message if error occured during the device intialization
        if(m_is_device_initialized)
        {
            m_status_message.str("");
        }

        //- get the singleton control objet used to pilot the lima framework
		m_ct = ControlFactory::instance().get_control("Hamamatsu");
		
	    //- get interface to specific camera
	    m_hw = dynamic_cast<lima::Hamamatsu::Interface*>(m_ct->hwInterface());
		
	    //- get camera to specific detector
	    m_camera = &(m_hw->getCamera());

		//update state
        dev_state();
	}
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "always_executed_hook Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "always_executed_hook Failed : UNKNOWN" << endl;
        m_status_message << "always_executed_hook Failed : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_attr_hardware
//
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "Hamamatsu::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

// ICATHALES-587
//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_sensorMode
// 
// description : 	Extract real attribute values for sensorMode acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_sensorMode(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_sensorMode(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_sensorMode_read = (Tango::DevUShort)m_camera->getSensorMode();
        attr.set_value(attr_sensorMode_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_sensorMode");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_sensorMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_sensorMode
// 
// description : 	Write sensorMode attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_sensorMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_sensorMode(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_sensorMode_write);
        m_camera->setSensorMode((lima::Hamamatsu::Camera::Sensor_Mode)attr_sensorMode_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "sensorMode", attr_sensorMode_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_sensorMode");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_sensorMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_pixelType
// 
// description : 	Extract real attribute values for pixelType acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_pixelType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_pixelType(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_pixelType_read = (Tango::DevUShort)m_camera->getPixelType();
        attr.set_value(attr_pixelType_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_pixelType");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_pixelType");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_pixelType
// 
// description : 	Write pixelType attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_pixelType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_pixelType(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_pixelType_write);
        m_camera->setPixelType((lima::Hamamatsu::Camera::Pixel_Type)attr_pixelType_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "pixelType", attr_pixelType_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_pixelType");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_pixelType");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_inputTriggerActive
// 
// description : 	Extract real attribute values for inputTriggerActive acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_inputTriggerActive(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_inputTriggerActive(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_inputTriggerActive_read = (Tango::DevUShort)m_camera->getInputTriggerActive();
        attr.set_value(attr_inputTriggerActive_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_inputTriggerActive");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_inputTriggerActive");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_inputTriggerActive
// 
// description : 	Write inputTriggerActive attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_inputTriggerActive(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_inputTriggerActive(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_inputTriggerActive_write);
        m_camera->setInputTriggerActive((lima::Hamamatsu::Camera::Input_Trigger_Active)attr_inputTriggerActive_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "inputTriggerActive", attr_inputTriggerActive_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_inputTriggerActive");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_inputTriggerActive");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_inputTriggerPolarity
// 
// description : 	Extract real attribute values for inputTriggerPolarity acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_inputTriggerPolarity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_inputTriggerPolarity(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_inputTriggerPolarity_read = (Tango::DevUShort)m_camera->getInputTriggerPolarity();
        attr.set_value(attr_inputTriggerPolarity_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_inputTriggerPolarity");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_inputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_inputTriggerPolarity
// 
// description : 	Write inputTriggerPolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_inputTriggerPolarity(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_inputTriggerPolarity(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_inputTriggerPolarity_write);
        m_camera->setInputTriggerPolarity((lima::Hamamatsu::Camera::Input_Trigger_Polarity)attr_inputTriggerPolarity_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "inputTriggerPolarity", attr_inputTriggerPolarity_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_inputTriggerPolarity");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_inputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel1OutputTriggerDelay
// 
// description : 	Extract real attribute values for channel1OutputTriggerDelay acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel1OutputTriggerDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel1OutputTriggerDelay(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel1OutputTriggerDelay_read = (Tango::DevDouble)m_camera->getOutputTriggerDelay(CHANNEL_1);
        attr.set_value(attr_channel1OutputTriggerDelay_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel1OutputTriggerDelay");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel1OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel1OutputTriggerDelay
// 
// description : 	Write channel1OutputTriggerDelay attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel1OutputTriggerDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel1OutputTriggerDelay(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_channel1OutputTriggerDelay_write);
        m_camera->setOutputTriggerDelay(CHANNEL_1, static_cast<double>(attr_channel1OutputTriggerDelay_write));

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel1OutputTriggerDelay", attr_channel1OutputTriggerDelay_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel1OutputTriggerDelay");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel1OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel2OutputTriggerDelay
// 
// description : 	Extract real attribute values for channel2OutputTriggerDelay acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel2OutputTriggerDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel2OutputTriggerDelay(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel2OutputTriggerDelay_read = (Tango::DevDouble)m_camera->getOutputTriggerDelay(CHANNEL_2);
        attr.set_value(attr_channel2OutputTriggerDelay_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel2OutputTriggerDelay");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel2OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel2OutputTriggerDelay
// 
// description : 	Write channel2OutputTriggerDelay attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel2OutputTriggerDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel2OutputTriggerDelay(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_channel2OutputTriggerDelay_write);
        m_camera->setOutputTriggerDelay(CHANNEL_2, static_cast<double>(attr_channel2OutputTriggerDelay_write));

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel2OutputTriggerDelay", attr_channel2OutputTriggerDelay_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel2OutputTriggerDelay");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel2OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel3OutputTriggerDelay
// 
// description : 	Extract real attribute values for channel3OutputTriggerDelay acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel3OutputTriggerDelay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel3OutputTriggerDelay(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel3OutputTriggerDelay_read = (Tango::DevDouble)m_camera->getOutputTriggerDelay(CHANNEL_3);
        attr.set_value(attr_channel3OutputTriggerDelay_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel3OutputTriggerDelay");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel3OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel3OutputTriggerDelay
// 
// description : 	Write channel3OutputTriggerDelay attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel3OutputTriggerDelay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel3OutputTriggerDelay(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_channel3OutputTriggerDelay_write);
        m_camera->setOutputTriggerDelay(CHANNEL_3, static_cast<double>(attr_channel3OutputTriggerDelay_write));

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel3OutputTriggerDelay", attr_channel3OutputTriggerDelay_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel3OutputTriggerDelay");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel3OutputTriggerDelay");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel1OutputTriggerSource
// 
// description : 	Extract real attribute values for channel1OutputTriggerSource acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel1OutputTriggerSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel1OutputTriggerSource(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel1OutputTriggerSource_read = (Tango::DevUShort)m_camera->getOutputTriggerSource(CHANNEL_1);
        attr.set_value(attr_channel1OutputTriggerSource_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel1OutputTriggerSource");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel1OutputTriggerSource");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel1OutputTriggerSource
// 
// description : 	Write channel1OutputTriggerSource attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel1OutputTriggerSource(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel1OutputTriggerSource(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_channel1OutputTriggerSource_write);
        m_camera->setOutputTriggerSource(CHANNEL_1, (lima::Hamamatsu::Camera::Output_Trigger_Source)attr_channel1OutputTriggerSource_write, m_raise_ex);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel1OutputTriggerSource", attr_channel1OutputTriggerSource_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel1OutputTriggerSource");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel1OutputTriggerSource");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel2OutputTriggerSource
// 
// description : 	Extract real attribute values for channel2OutputTriggerSource acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel2OutputTriggerSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel2OutputTriggerSource(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel2OutputTriggerSource_read = (Tango::DevUShort)m_camera->getOutputTriggerSource(CHANNEL_2);
        attr.set_value(attr_channel2OutputTriggerSource_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel2OutputTriggerSource");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel2OutputTriggerSource");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel2OutputTriggerSource
// 
// description : 	Write channel2OutputTriggerSource attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel2OutputTriggerSource(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel2OutputTriggerSource(Tango::WAttribute &attr) entering... "<< endl;
    try
	{
        attr.get_write_value(attr_channel2OutputTriggerSource_write);
        m_camera->setOutputTriggerSource(CHANNEL_2, (lima::Hamamatsu::Camera::Output_Trigger_Source)attr_channel2OutputTriggerSource_write, m_raise_ex);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel2OutputTriggerSource", attr_channel2OutputTriggerSource_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel2OutputTriggerSource");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel2OutputTriggerSource");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel3OutputTriggerSource
// 
// description : 	Extract real attribute values for channel3OutputTriggerSource acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel3OutputTriggerSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel3OutputTriggerSource(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        *attr_channel3OutputTriggerSource_read = (Tango::DevUShort)m_camera->getOutputTriggerSource(CHANNEL_3);
        attr.set_value(attr_channel3OutputTriggerSource_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel3OutputTriggerSource");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel3OutputTriggerSource");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel3OutputTriggerSource
// 
// description : 	Write channel3OutputTriggerSource attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel3OutputTriggerSource(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::write_channel3OutputTriggerSource(Tango::WAttribute &attr) entering... "<< endl;
    //write_channelTrigger(attr, CHANNEL_3, OUTPUT_TRIGGER_SOURCE);
    try
	{
        attr.get_write_value(attr_channel3OutputTriggerSource_write);
        m_camera->setOutputTriggerSource(CHANNEL_3, (lima::Hamamatsu::Camera::Output_Trigger_Source)attr_channel3OutputTriggerSource_write, m_raise_ex);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel3OutputTriggerSource", attr_channel3OutputTriggerSource_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel3OutputTriggerSource");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel3OutputTriggerSource");
    }
}


//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel1OutputTriggerPolarity
// 
// description : 	Extract real attribute values for channel1OutputTriggerPolarity acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel1OutputTriggerPolarity(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Hamamatsu::read_channel1OutputTriggerPolarity(Tango::Attribute &attr) entering... " << endl;
    try
    {
        *attr_channel1OutputTriggerPolarity_read = (Tango::DevUShort)m_camera->getOutputTriggerPolarity(CHANNEL_1);
        attr.set_value(attr_channel1OutputTriggerPolarity_read);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel1OutputTriggerPolarity");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel1OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel1OutputTriggerPolarity
// 
// description : 	Write channel1OutputTriggerPolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel1OutputTriggerPolarity(Tango::WAttribute &attr)
{
    INFO_STREAM << "Hamamatsu::write_channel1OutputTriggerPolarity(Tango::WAttribute &attr) entering... " << endl;

    try
    {
        attr.get_write_value(attr_channel1OutputTriggerPolarity_write);
        m_camera->setOutputTriggerPolarity(CHANNEL_1, (lima::Hamamatsu::Camera::Output_Trigger_Polarity)attr_channel1OutputTriggerPolarity_write);

        yat4tango::PropertyHelper::set_memorized_attribute(this, "channel1OutputTriggerPolarity", attr_channel1OutputTriggerPolarity_write);
    }
    catch (Tango::DevFailed &df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel1OutputTriggerPolarity");
    }
    catch (Exception &e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel1OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel2OutputTriggerPolarity
// 
// description : 	Extract real attribute values for channel2OutputTriggerPolarity acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel2OutputTriggerPolarity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel2OutputTriggerPolarity(Tango::Attribute &attr) entering... "<< endl;

     try
	{
		*attr_channel2OutputTriggerPolarity_read = (Tango::DevUShort) m_camera->getOutputTriggerPolarity(CHANNEL_2);
		attr.set_value(attr_channel2OutputTriggerPolarity_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel2OutputTriggerPolarity");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel2OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel2OutputTriggerPolarity
// 
// description : 	Write channel2OutputTriggerPolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel2OutputTriggerPolarity(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_channel2OutputTriggerPolarity(Tango::WAttribute &attr) entering... "<< endl;

    try
	{
        attr.get_write_value(attr_channel2OutputTriggerPolarity_write);
        m_camera->setOutputTriggerPolarity(CHANNEL_2, (lima::Hamamatsu::Camera::Output_Trigger_Polarity)attr_channel2OutputTriggerPolarity_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel2OutputTriggerPolarity", attr_channel2OutputTriggerPolarity_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel2OutputTriggerPolarity");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel2OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel3OutputTriggerPolarity
// 
// description : 	Extract real attribute values for channel3OutputTriggerPolarity acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel3OutputTriggerPolarity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel3OutputTriggerPolarity(Tango::Attribute &attr) entering... "<< endl;

     try
	{
		*attr_channel3OutputTriggerPolarity_read = (Tango::DevUShort)m_camera->getOutputTriggerPolarity(CHANNEL_3);
		attr.set_value(attr_channel3OutputTriggerPolarity_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel3OutputTriggerPolarity");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel3OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel3OutputTriggerPolarity
// 
// description : 	Write channel3OutputTriggerPolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel3OutputTriggerPolarity(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_channel3OutputTriggerPolarity(Tango::WAttribute &attr) entering... "<< endl;

    try
	{
        attr.get_write_value(attr_channel3OutputTriggerPolarity_write);
        m_camera->setOutputTriggerPolarity(CHANNEL_3, (lima::Hamamatsu::Camera::Output_Trigger_Polarity)attr_channel3OutputTriggerPolarity_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel3OutputTriggerPolarity", attr_channel3OutputTriggerPolarity_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel3OutputTriggerPolarity");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel3OutputTriggerPolarity");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel1OutputTriggerKind
// 
// description : 	Extract real attribute values for channel1OutputTriggerKind acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel1OutputTriggerKind(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel1OutputTriggerKind(Tango::Attribute &attr) entering... "<< endl;

    try
	{
		*attr_channel1OutputTriggerKind_read = (Tango::DevUShort)m_camera->getOutputTriggerKind(CHANNEL_1);
		attr.set_value(attr_channel1OutputTriggerKind_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel1OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel1OutputTriggerKind");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel1OutputTriggerKind
// 
// description : 	Write channel1OutputTriggerKind attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel1OutputTriggerKind(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_channel1OutputTriggerKind(Tango::WAttribute &attr) entering... "<< endl;

     try
	{
        attr.get_write_value(attr_channel1OutputTriggerKind_write);
        m_camera->setOutputTriggerKind(CHANNEL_1, (lima::Hamamatsu::Camera::Output_Trigger_Kind)attr_channel1OutputTriggerKind_write);

        yat4tango::PropertyHelper::set_memorized_attribute(this, "channel1OutputTriggerKind", attr_channel1OutputTriggerKind_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel1OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel1OutputTriggerKind");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel2OutputTriggerKind
// 
// description : 	Extract real attribute values for channel2OutputTriggerKind acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel2OutputTriggerKind(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel2OutputTriggerKind(Tango::Attribute &attr) entering... "<< endl;

    try
	{
		*attr_channel2OutputTriggerKind_read = (Tango::DevUShort)m_camera->getOutputTriggerKind(CHANNEL_2);
		attr.set_value(attr_channel2OutputTriggerKind_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel2OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel2OutputTriggerKind");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel2OutputTriggerKind
// 
// description : 	Write channel2OutputTriggerKind attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel2OutputTriggerKind(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_channel2OutputTriggerKind(Tango::WAttribute &attr) entering... "<< endl;

     try
	{
        attr.get_write_value(attr_channel2OutputTriggerKind_write);
        m_camera->setOutputTriggerKind(CHANNEL_2, (lima::Hamamatsu::Camera::Output_Trigger_Kind)attr_channel2OutputTriggerKind_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel2OutputTriggerKind", attr_channel2OutputTriggerKind_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel2OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel2OutputTriggerKind");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_channel3OutputTriggerKind
// 
// description : 	Extract real attribute values for channel3OutputTriggerKind acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_channel3OutputTriggerKind(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_channel3OutputTriggerKind(Tango::Attribute &attr) entering... "<< endl;

    try
	{
		*attr_channel3OutputTriggerKind_read = (Tango::DevUShort)m_camera->getOutputTriggerKind(CHANNEL_3);
		attr.set_value(attr_channel3OutputTriggerKind_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_channel3OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_channel3OutputTriggerKind");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_channel3OutputTriggerKind
// 
// description : 	Write channel3OutputTriggerKind attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_channel3OutputTriggerKind(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_channel3OutputTriggerKind(Tango::WAttribute &attr) entering... "<< endl;

    try
	{
        attr.get_write_value(attr_channel3OutputTriggerKind_write);
        m_camera->setOutputTriggerKind(CHANNEL_3, (lima::Hamamatsu::Camera::Output_Trigger_Kind)attr_channel3OutputTriggerKind_write);

		yat4tango::PropertyHelper::set_memorized_attribute(this, "channel3OutputTriggerKind", attr_channel3OutputTriggerKind_write);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_channel3OutputTriggerKind");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_channel3OutputTriggerKind");
    }
}



//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_topViewExposureTime
// 
// description : 	Extract real attribute values for topViewExposureTime acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_topViewExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_topViewExposureTime(Tango::Attribute &attr) entering... "<< endl;

	try
	{
		double exp_time = 0.0;

        m_camera->getViewExpTime1(exp_time);
		*attr_topViewExposureTime_read = (Tango::DevDouble)(exp_time * 1000.0);
		attr.set_value(attr_topViewExposureTime_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_topViewExposureTime");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_topViewExposureTime");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_topViewExposureTime
// 
// description : 	Write topViewExposureTime attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_topViewExposureTime(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_topViewExposureTime(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
        attr.get_write_value(attr_topViewExposureTime_write);
        m_camera->setViewExpTime1((double) (attr_topViewExposureTime_write / 1000.0));

        m_top_view_exposure_time = (double)attr_topViewExposureTime_write;
		yat4tango::PropertyHelper::set_property(this, "MemorizedTopViewExposureTime", m_top_view_exposure_time);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_topViewExposureTime");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_topViewExposureTime");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_bottomViewExposureTime
// 
// description : 	Extract real attribute values for bottomViewExposureTime acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_bottomViewExposureTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_bottomViewExposureTime(Tango::Attribute &attr) entering... "<< endl;

	try
	{
		double exp_time = 0.0;

        m_camera->getViewExpTime2(exp_time);
		*attr_bottomViewExposureTime_read = (Tango::DevDouble)(exp_time * 1000.0);
		attr.set_value(attr_bottomViewExposureTime_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_bottomViewExposureTime");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_bottomViewExposureTime");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_bottomViewExposureTime
// 
// description : 	Write bottomViewExposureTime attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_bottomViewExposureTime(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_bottomViewExposureTime(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
        attr.get_write_value(attr_bottomViewExposureTime_write);
        m_camera->setViewExpTime2((double) (attr_bottomViewExposureTime_write / 1000.0));

        m_bottom_view_exposure_time = (double)attr_bottomViewExposureTime_write;
		yat4tango::PropertyHelper::set_property(this, "MemorizedBottomViewExposureTime", m_bottom_view_exposure_time);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_bottomViewExposureTime");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_bottomViewExposureTime");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_wViewEnabled
// 
// description : 	Extract real attribute values for wViewEnabled acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_wViewEnabled(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_wViewEnabled(Tango::Attribute &attr) entering... "<< endl;

	try
	{
		bool enabled = false;
		
        m_camera->getViewMode(enabled);
		*attr_wViewEnabled_read = enabled;
		attr.set_value(attr_wViewEnabled_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_wViewEnabled");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_wViewEnabled");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_wViewEnabled
// 
// description : 	Write wViewEnabled attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_wViewEnabled(Tango::WAttribute &attr)
{
	INFO_STREAM << "Hamamatsu::write_wViewEnabled(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
        attr.get_write_value(attr_wViewEnabled_write);

        // We want to activate W-VIEW mode
        if(attr_wViewEnabled_write)
        {
            // checking if we are in full frame ROI, the only ROI which is allowed.
            Size Full_size;
            m_camera->getDetectorMaxImageSize(Full_size);

            Roi Current_ROI;
            Bin Current_bin;

            m_ct->image()->getRoi(Current_ROI);
            m_ct->image()->getBin(Current_bin);
            Roi FullROI(Point(0, 0), Size(Full_size.getWidth() / Current_bin.getX(), Full_size.getHeight() / Current_bin.getY()));

            if(Current_ROI != FullROI)
            {
                stringstream ErrorTxt;

                ErrorTxt << "W-VIEW mode does not support the current ROI (";
                ErrorTxt << Current_ROI.getTopLeft().x        << ", ";
                ErrorTxt << Current_ROI.getTopLeft().y        << ", ";
                ErrorTxt << Current_ROI.getSize().getWidth()  << ", ";
                ErrorTxt << Current_ROI.getSize().getHeight() << ").\n\n";

                ErrorTxt << "Please define a full frame ROI\n";
                ErrorTxt << "using ResetROI or SetROI (";
                ErrorTxt << FullROI.getTopLeft().x        << ", ";
                ErrorTxt << FullROI.getTopLeft().y        << ", ";
                ErrorTxt << FullROI.getSize().getWidth()  << ", ";
                ErrorTxt << FullROI.getSize().getHeight() << ") commands.";

                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               ErrorTxt.str().c_str(),
                                               "Hamamatsu::write_wViewEnabled");
            }
        }

        m_camera->setViewMode(attr_wViewEnabled_write);
        m_wView_enabled = attr_wViewEnabled_write;
		yat4tango::PropertyHelper::set_property(this, "MemorizedWViewEnabled", m_wView_enabled);

        if(m_wView_enabled)
        {
            // reseting the views exposures
            {
                m_camera->setViewExpTime1(m_top_view_exposure_time    / 1000.0);
                m_camera->setViewExpTime2(m_bottom_view_exposure_time / 1000.0); 
            }
        }
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_wViewEnabled");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_wViewEnabled");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_fps
// 
// description : 	Extract real attribute values for fps acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_fps(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_fps(Tango::Attribute &attr) entering... "<< endl;

	try
	{
		double fps = 0.0;
		m_camera->getFPS(fps);
		*attr_fps_read = fps;
		attr.set_value(attr_fps_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_fps");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_fps");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_lostFrames
// 
// description : 	Extract real attribute values for lostFrames acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_lostFrames(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Hamamatsu::read_lostFrames(Tango::Attribute &attr) entering... "<< endl;
	
	try
	{
		unsigned long int lost_frames = 0;
		m_camera->getLostFrames(lost_frames);
		*attr_lostFrames_read = lost_frames;
		attr.set_value(attr_lostFrames_read);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_lostFrames");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_lostFrames");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_readoutSpeed_callback
// 
// description : 	Extract real attribute values for readoutSpeed.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_readoutSpeed_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_string_attribute<Tango::DevString>(cbd, &lima::Hamamatsu::Camera::getReadoutSpeedLabel, "Hamamatsu::read_readoutSpeed_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_readoutSpeed_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_readoutSpeed_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_readoutSpeed_callback
// 
// description : 	Set real attribute values for readoutSpeed.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_readoutSpeed_callback(yat4tango::DynamicAttributeWriteCallbackData& cbd)
{
	try
	{
        write_dynamic_string_attribute<Tango::DevString>(cbd, &lima::Hamamatsu::Camera::setReadoutSpeedLabel, "MemorizedReadoutSpeed", "Hamamatsu::write_readoutSpeed_callback");
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_readoutSpeed_callback");
    }
    catch(lima::Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_readoutSpeed_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_temperature_callback
// 
// description : 	Extract real attribute values for temperature acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_temperature_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_attribute<Tango::DevDouble>(cbd, &lima::Hamamatsu::Camera::getSensorTemperature, "Hamamatsu::read_temperature_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_temperature_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_temperature_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_temperatureStatus_callback
// 
// description : 	Extract real attribute values for temperatureStatus acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_temperatureStatus_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_string_attribute<Tango::DevString>(cbd, &lima::Hamamatsu::Camera::getTemperatureStatusLabel, "Hamamatsu::read_temperatureStatus_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_temperatureStatus_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_temperatureStatus_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_coolerMode_callback
// 
// description : 	Extract real attribute values for coolerMode acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_coolerMode_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_string_attribute<Tango::DevString>(cbd, &lima::Hamamatsu::Camera::getCoolerModeLabel, "Hamamatsu::read_coolerMode_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_coolerMode_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_coolerMode_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_coolerStatus_callback
// 
// description : 	Extract real attribute values for coolerStatus acquisition result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_coolerStatus_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_string_attribute<Tango::DevString>(cbd, &lima::Hamamatsu::Camera::getCoolerStatusLabel, "Hamamatsu::read_coolerStatus_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_coolerStatus_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_coolerStatus_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::read_highDynamicRangeEnabled_callback
// 
// description : 	Extract real attribute values for high dynamic range enabled result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::read_highDynamicRangeEnabled_callback(yat4tango::DynamicAttributeReadCallbackData& cbd)
{
	try
	{
        read_dynamic_attribute<Tango::DevBoolean>(cbd, &lima::Hamamatsu::Camera::getHighDynamicRangeEnabled, "Hamamatsu::read_highDynamicRangeEnabled_callback", true);
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::read_highDynamicRangeEnabled_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::read_highDynamicRangeEnabled_callback");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Hamamatsu::write_highDynamicRangeEnabled_callback
// 
// description : 	Set real attribute values for high dynamic range enabled result.
//
//-----------------------------------------------------------------------------
void Hamamatsu::write_highDynamicRangeEnabled_callback(yat4tango::DynamicAttributeWriteCallbackData& cbd)
{
	try
	{
        write_dynamic_attribute<Tango::DevBoolean>(cbd, &lima::Hamamatsu::Camera::setHighDynamicRangeEnabled, "MemorizedHighDynamicRangeEnabled", "Hamamatsu::write_highDynamicRangeEnabled_callback");
	}
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::write_highDynamicRangeEnabled_callback");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::write_highDynamicRangeEnabled_callback");
    }
}

//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState Hamamatsu::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();

	//	Add your own code to control device here
	stringstream    Device_status;
	Device_status     << "";
	Tango::DevState Device_state = Tango::STANDBY;
	if(!m_is_device_initialized )
	{
		Device_state  = Tango::FAULT;
		Device_status << m_status_message.str();
        
        //update specific_state state for Factory
        ControlFactory::instance().set_specific_state(Device_state);
	}
	else
	{
        //update specific_state device before retrieving state from factory
        ControlFactory::instance().set_specific_state(Device_state);

		// state & status are retrieved from Factory, Factory is updated by Generic device
		Device_state = ControlFactory::instance().get_state();
		Device_status << ControlFactory::instance().get_status();
	}

	set_state(Device_state);
	set_status(Device_status.str());

	return Device_state;
}

//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
//+------------------------------------------------------------------
void Hamamatsu::manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception << endl;
	
    // rethrow exception
    Tango::Except::re_throw_exception(in_exception,
                                      "TANGO_DEVICE_ERROR",
                                      string(in_exception.errors[0].desc).c_str(),
                                      in_caller_method_name.c_str());
}

//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
//+------------------------------------------------------------------
void Hamamatsu::manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name)
{
    ERROR_STREAM << in_exception.getErrMsg() << endl;

    // throw exception
    Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                   in_exception.getErrMsg().c_str(),
                                   in_caller_method_name.c_str());
}



//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::get_all_parameters
 *
 *	description:	method to execute "GetAllParameters"
 *	ParameterName = value
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString Hamamatsu::get_all_parameters()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	DEBUG_STREAM << "Hamamatsu::get_all_parameters(): entering... !" << endl;
    Tango::DevString argout;
	//	Add your own code to control device here
    try
    {
        argout = CORBA::string_dup(m_camera->getAllParameters().c_str());
    }
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::get_all_parameters");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::get_all_parameters");
    }
    return argout;
}





//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::get_parameter
 *
 *	description:	method to execute "GetParameter"
 *	Return the name and value of a specific parameter
 *
 * @param	argin	Name of the parameter
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString Hamamatsu::get_parameter(Tango::DevString argin)
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	INFO_STREAM << "Hamamatsu::get_parameter(): entering... !" << endl;

    Tango::DevString argout;
	//	Add your own code to control device here

    try
    {
        argout = CORBA::string_dup(m_camera->getParameter(argin).c_str());        
    }
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::get_parameter");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::get_parameter");
    }
    return argout;
}





//+------------------------------------------------------------------
/**
 *	method:	Hamamatsu::set_parameter
 *
 *	description:	method to execute "SetParameter"
 *	Set the value of a parameter
 *
 * @param	argin	First argument is the parameter's name, Second is the value
 *
 */
//+------------------------------------------------------------------
void Hamamatsu::set_parameter(const Tango::DevVarStringArray *argin)
{
	INFO_STREAM << "Hamamatsu::set_parameter(): entering... !" << endl;

	//	Add your own code to control device here
    std::string parameter_name = (*argin)[0];
    std::string value = (*argin)[1];
    try
    {
        m_camera->setParameter(parameter_name, std::stod(value));
    }
    catch(Tango::DevFailed & df)
    {
        manage_devfailed_exception(df, "Hamamatsu::set_parameter");
    }
    catch(Exception & e)
    {
        manage_lima_exception(e, "Hamamatsu::set_parameter");
    }
}








}	//	namespace
