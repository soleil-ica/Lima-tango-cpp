//=============================================================================
//
// file :         HamamatsuClass.h
//
// description :  Include for the HamamatsuClass root class.
//                This class is the singleton class for
//                the Hamamatsu device class.
//                It contains all properties and methods which the 
//                Hamamatsu requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _HAMAMATSUCLASS_H
#define _HAMAMATSUCLASS_H

#include <tango.h>
#include <Hamamatsu.h>


namespace Hamamatsu_ns
{//=====================================
//	Define classes for attributes
//=====================================
class temperatureStatusAttrib: public Tango::Attr
{
public:
	temperatureStatusAttrib():Attr("temperatureStatus", Tango::DEV_STRING, Tango::READ) {};
	~temperatureStatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_temperatureStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_temperatureStatus_allowed(ty);}
};

class coolerStatusAttrib: public Tango::Attr
{
public:
	coolerStatusAttrib():Attr("coolerStatus", Tango::DEV_STRING, Tango::READ) {};
	~coolerStatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_coolerStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_coolerStatus_allowed(ty);}
};

class coolerModeAttrib: public Tango::Attr
{
public:
	coolerModeAttrib():Attr("coolerMode", Tango::DEV_STRING, Tango::READ) {};
	~coolerModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_coolerMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_coolerMode_allowed(ty);}
};

class temperatureAttrib: public Tango::Attr
{
public:
	temperatureAttrib():Attr("temperature", Tango::DEV_DOUBLE, Tango::READ) {};
	~temperatureAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_temperature_allowed(ty);}
};

class bottomViewExposureTimeAttrib: public Tango::Attr
{
public:
	bottomViewExposureTimeAttrib():Attr("bottomViewExposureTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~bottomViewExposureTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_bottomViewExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_bottomViewExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_bottomViewExposureTime_allowed(ty);}
};

class topViewExposureTimeAttrib: public Tango::Attr
{
public:
	topViewExposureTimeAttrib():Attr("topViewExposureTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~topViewExposureTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_topViewExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_topViewExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_topViewExposureTime_allowed(ty);}
};

class wViewEnabledAttrib: public Tango::Attr
{
public:
	wViewEnabledAttrib():Attr("wViewEnabled", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~wViewEnabledAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_wViewEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_wViewEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_wViewEnabled_allowed(ty);}
};

class fpsAttrib: public Tango::Attr
{
public:
	fpsAttrib():Attr("fps", Tango::DEV_DOUBLE, Tango::READ) {};
	~fpsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_fps(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_fps_allowed(ty);}
};

class lostFramesAttrib: public Tango::Attr
{
public:
	lostFramesAttrib():Attr("lostFrames", Tango::DEV_LONG, Tango::READ) {};
	~lostFramesAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_lostFrames(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_lostFrames_allowed(ty);}
};

class readoutSpeedAttrib: public Tango::Attr
{
public:
	readoutSpeedAttrib():Attr("readoutSpeed", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~readoutSpeedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_readoutSpeed(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_readoutSpeed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_readoutSpeed_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The HamamatsuClass singleton definition
//

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	HamamatsuClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static HamamatsuClass *init(const char *);
	static HamamatsuClass *instance();
	~HamamatsuClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	HamamatsuClass(string &);
	static HamamatsuClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Hamamatsu_ns

#endif // _HAMAMATSUCLASS_H
