//=============================================================================
//
// file :         HamamatsuClass.h
//
// description :  Include for the HamamatsuClass root class.
//                This class is the singleton class for
//                the Hamamatsu device class.
//                It contains all properties and methods which the 
//                Hamamatsu requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _HAMAMATSUCLASS_H
#define _HAMAMATSUCLASS_H

#include <tango.h>
#include <Hamamatsu.h>


namespace Hamamatsu_ns
{//=====================================
//	Define classes for attributes
//=====================================
class channel3OutputTriggerSourceAttrib: public Tango::Attr
{
public:
	channel3OutputTriggerSourceAttrib():Attr("channel3OutputTriggerSource", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~channel3OutputTriggerSourceAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel3OutputTriggerSource(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel3OutputTriggerSource(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel3OutputTriggerSource_allowed(ty);}
};

class channel2OutputTriggerSourceAttrib: public Tango::Attr
{
public:
	channel2OutputTriggerSourceAttrib():Attr("channel2OutputTriggerSource", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~channel2OutputTriggerSourceAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel2OutputTriggerSource(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel2OutputTriggerSource(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel2OutputTriggerSource_allowed(ty);}
};

class channel1OutputTriggerSourceAttrib: public Tango::Attr
{
public:
	channel1OutputTriggerSourceAttrib():Attr("channel1OutputTriggerSource", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~channel1OutputTriggerSourceAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel1OutputTriggerSource(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel1OutputTriggerSource(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel1OutputTriggerSource_allowed(ty);}
};

class channel3OutputTriggerDelayAttrib: public Tango::Attr
{
public:
	channel3OutputTriggerDelayAttrib():Attr("channel3OutputTriggerDelay", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~channel3OutputTriggerDelayAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel3OutputTriggerDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel3OutputTriggerDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel3OutputTriggerDelay_allowed(ty);}
};

class channel2OutputTriggerDelayAttrib: public Tango::Attr
{
public:
	channel2OutputTriggerDelayAttrib():Attr("channel2OutputTriggerDelay", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~channel2OutputTriggerDelayAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel2OutputTriggerDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel2OutputTriggerDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel2OutputTriggerDelay_allowed(ty);}
};

class channel1OutputTriggerDelayAttrib: public Tango::Attr
{
public:
	channel1OutputTriggerDelayAttrib():Attr("channel1OutputTriggerDelay", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~channel1OutputTriggerDelayAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel1OutputTriggerDelay(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel1OutputTriggerDelay(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel1OutputTriggerDelay_allowed(ty);}
};

class channel3OutputTriggerKindAttrib: public Tango::Attr
{
public:
	channel3OutputTriggerKindAttrib():Attr("channel3OutputTriggerKind", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel3OutputTriggerKindAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel3OutputTriggerKind(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel3OutputTriggerKind(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel3OutputTriggerKind_allowed(ty);}
};

class channel2OutputTriggerKindAttrib: public Tango::Attr
{
public:
	channel2OutputTriggerKindAttrib():Attr("channel2OutputTriggerKind", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel2OutputTriggerKindAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel2OutputTriggerKind(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel2OutputTriggerKind(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel2OutputTriggerKind_allowed(ty);}
};

class channel1OutputTriggerKindAttrib: public Tango::Attr
{
public:
	channel1OutputTriggerKindAttrib():Attr("channel1OutputTriggerKind", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel1OutputTriggerKindAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel1OutputTriggerKind(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel1OutputTriggerKind(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel1OutputTriggerKind_allowed(ty);}
};

class channel3OutputTriggerPolarityAttrib: public Tango::Attr
{
public:
	channel3OutputTriggerPolarityAttrib():Attr("channel3OutputTriggerPolarity", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel3OutputTriggerPolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel3OutputTriggerPolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel3OutputTriggerPolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel3OutputTriggerPolarity_allowed(ty);}
};

class channel2OutputTriggerPolarityAttrib: public Tango::Attr
{
public:
	channel2OutputTriggerPolarityAttrib():Attr("channel2OutputTriggerPolarity", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel2OutputTriggerPolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel2OutputTriggerPolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel2OutputTriggerPolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel2OutputTriggerPolarity_allowed(ty);}
};

class channel1OutputTriggerPolarityAttrib: public Tango::Attr
{
public:
	channel1OutputTriggerPolarityAttrib():Attr("channel1OutputTriggerPolarity", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~channel1OutputTriggerPolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_channel1OutputTriggerPolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_channel1OutputTriggerPolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_channel1OutputTriggerPolarity_allowed(ty);}
};

class inputTriggerPolarityAttrib: public Tango::Attr
{
public:
	inputTriggerPolarityAttrib():Attr("inputTriggerPolarity", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~inputTriggerPolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_inputTriggerPolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_inputTriggerPolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_inputTriggerPolarity_allowed(ty);}
};

class inputTriggerActiveAttrib: public Tango::Attr
{
public:
	inputTriggerActiveAttrib():Attr("inputTriggerActive", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~inputTriggerActiveAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_inputTriggerActive(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_inputTriggerActive(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_inputTriggerActive_allowed(ty);}
};

class pixelTypeAttrib: public Tango::Attr
{
public:
	pixelTypeAttrib():Attr("pixelType", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~pixelTypeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_pixelType(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_pixelType(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_pixelType_allowed(ty);}
};

class sensorModeAttrib: public Tango::Attr
{
public:
	sensorModeAttrib():Attr("sensorMode", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~sensorModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_sensorMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_sensorMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_sensorMode_allowed(ty);}
};

class bottomViewExposureTimeAttrib: public Tango::Attr
{
public:
	bottomViewExposureTimeAttrib():Attr("bottomViewExposureTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~bottomViewExposureTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_bottomViewExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_bottomViewExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_bottomViewExposureTime_allowed(ty);}
};

class topViewExposureTimeAttrib: public Tango::Attr
{
public:
	topViewExposureTimeAttrib():Attr("topViewExposureTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~topViewExposureTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_topViewExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_topViewExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_topViewExposureTime_allowed(ty);}
};

class wViewEnabledAttrib: public Tango::Attr
{
public:
	wViewEnabledAttrib():Attr("wViewEnabled", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~wViewEnabledAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_wViewEnabled(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Hamamatsu *>(dev))->write_wViewEnabled(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_wViewEnabled_allowed(ty);}
};

class fpsAttrib: public Tango::Attr
{
public:
	fpsAttrib():Attr("fps", Tango::DEV_DOUBLE, Tango::READ) {};
	~fpsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_fps(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_fps_allowed(ty);}
};

class lostFramesAttrib: public Tango::Attr
{
public:
	lostFramesAttrib():Attr("lostFrames", Tango::DEV_LONG, Tango::READ) {};
	~lostFramesAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Hamamatsu *>(dev))->read_lostFrames(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Hamamatsu *>(dev))->is_lostFrames_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class SetParameterCmd : public Tango::Command
{
public:
	SetParameterCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetParameterCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetParameterCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Hamamatsu *>(dev))->is_SetParameter_allowed(any);}
};



class GetParameterCmd : public Tango::Command
{
public:
	GetParameterCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetParameterCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetParameterCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Hamamatsu *>(dev))->is_GetParameter_allowed(any);}
};



class GetAllParametersCmd : public Tango::Command
{
public:
	GetAllParametersCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetAllParametersCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetAllParametersCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Hamamatsu *>(dev))->is_GetAllParameters_allowed(any);}
};



//
// The HamamatsuClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	HamamatsuClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static HamamatsuClass *init(const char *);
	static HamamatsuClass *instance();
	~HamamatsuClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	HamamatsuClass(string &);
	static HamamatsuClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Hamamatsu_ns

#endif // _HAMAMATSUCLASS_H
