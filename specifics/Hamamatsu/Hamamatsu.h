//=============================================================================
//
// file :        Hamamatsu.h
//
// description : Include for the Hamamatsu class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _HAMAMATSU_H
#define _HAMAMATSU_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>
#include <yat4tango/DynamicInterfaceManager.h>

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------
#include "Factory.h"
#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "HamamatsuInterface.h"
#include "HamamatsuCamera.h"

//using namespace lima::Hamamatsu;
using namespace lima;
using namespace yat4tango;

namespace Hamamatsu_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class Hamamatsu: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevLong	*attr_lostFrames_read;
		Tango::DevDouble	*attr_fps_read;
		Tango::DevBoolean	*attr_wViewEnabled_read;
		Tango::DevBoolean	attr_wViewEnabled_write;
		Tango::DevDouble	*attr_topViewExposureTime_read;
		Tango::DevDouble	attr_topViewExposureTime_write;
		Tango::DevDouble	*attr_bottomViewExposureTime_read;
		Tango::DevDouble	attr_bottomViewExposureTime_write;
		Tango::DevUShort	*attr_sensorMode_read;
		Tango::DevUShort	attr_sensorMode_write;
		Tango::DevUShort	*attr_pixelType_read;
		Tango::DevUShort	attr_pixelType_write;
		Tango::DevShort	*attr_inputTriggerActive_read;
		Tango::DevShort	attr_inputTriggerActive_write;
		Tango::DevShort	*attr_inputTriggerPolarity_read;
		Tango::DevShort	attr_inputTriggerPolarity_write;
		Tango::DevUShort	*attr_channel1OutputTriggerPolarity_read;
		Tango::DevUShort	attr_channel1OutputTriggerPolarity_write;
		Tango::DevUShort	*attr_channel2OutputTriggerPolarity_read;
		Tango::DevUShort	attr_channel2OutputTriggerPolarity_write;
		Tango::DevUShort	*attr_channel3OutputTriggerPolarity_read;
		Tango::DevUShort	attr_channel3OutputTriggerPolarity_write;
		Tango::DevUShort	*attr_channel1OutputTriggerKind_read;
		Tango::DevUShort	attr_channel1OutputTriggerKind_write;
		Tango::DevUShort	*attr_channel2OutputTriggerKind_read;
		Tango::DevUShort	attr_channel2OutputTriggerKind_write;
		Tango::DevUShort	*attr_channel3OutputTriggerKind_read;
		Tango::DevUShort	attr_channel3OutputTriggerKind_write;
		Tango::DevDouble	*attr_channel1OutputTriggerDelay_read;
		Tango::DevDouble	attr_channel1OutputTriggerDelay_write;
		Tango::DevDouble	*attr_channel2OutputTriggerDelay_read;
		Tango::DevDouble	attr_channel2OutputTriggerDelay_write;
		Tango::DevDouble	*attr_channel3OutputTriggerDelay_read;
		Tango::DevDouble	attr_channel3OutputTriggerDelay_write;
		Tango::DevShort	*attr_channel1OutputTriggerSource_read;
		Tango::DevShort	attr_channel1OutputTriggerSource_write;
		Tango::DevShort	*attr_channel2OutputTriggerSource_read;
		Tango::DevShort	attr_channel2OutputTriggerSource_write;
		Tango::DevShort	*attr_channel3OutputTriggerSource_read;
		Tango::DevShort	attr_channel3OutputTriggerSource_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	id of the camera
 */
	Tango::DevLong	detectorNum;
/**
 *	Memorize/Define the readoutSpeed attribute at Init device<br>
 *	Availables values :<br>
 *	NORMAL<br>
 *	SLOW<br>
 */
	string	memorizedReadoutSpeed;
/**
 *	Allows you to select the blank of synreadout:<BR>
 *	Availables values :<br>
 *	- STANDARD<BR>
 *	- MINIMUM<BR>
 *	
 */
	string	blankOfSyncreadoutTrigger;
/**
 *	Memorize/Define the Top View exposure time attribute at Init device<br>
 */
	Tango::DevDouble	memorizedTopViewExposureTime;
/**
 *	Memorize/Define the Bottom View exposure time attribute at Init device<br>
 */
	Tango::DevDouble	memorizedBottomViewExposureTime;
/**
 *	Memorize/Define the W-VIEW mode attribute at Init device<br>
 */
	Tango::DevBoolean	memorizedWViewEnabled;
/**
 *	Memorize/Define the HighDynamicRangeEnabled attribute at Init device<br>
 */
	Tango::DevBoolean	memorizedHighDynamicRangeEnabled;
/**
 *	Only an expert User could change this property.<br>
 *	This is the DCAM frame buffer size used during the acquisition.<BR>
 */
	Tango::DevLong	expertFrameBufferSize;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Hamamatsu(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Hamamatsu(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Hamamatsu(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~Hamamatsu() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
	void delete_orcaQuest_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
	void create_orcaQuest_attributes();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Hamamatsu methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for lostFrames acquisition result.
 */
	virtual void read_lostFrames(Tango::Attribute &attr);
/**
 *	Extract real attribute values for fps acquisition result.
 */
	virtual void read_fps(Tango::Attribute &attr);
/**
 *	Extract real attribute values for wViewEnabled acquisition result.
 */
	virtual void read_wViewEnabled(Tango::Attribute &attr);
/**
 *	Write wViewEnabled attribute values to hardware.
 */
	virtual void write_wViewEnabled(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for topViewExposureTime acquisition result.
 */
	virtual void read_topViewExposureTime(Tango::Attribute &attr);
/**
 *	Write topViewExposureTime attribute values to hardware.
 */
	virtual void write_topViewExposureTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for bottomViewExposureTime acquisition result.
 */
	virtual void read_bottomViewExposureTime(Tango::Attribute &attr);
/**
 *	Write bottomViewExposureTime attribute values to hardware.
 */
	virtual void write_bottomViewExposureTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for sensorMode acquisition result.
 */
	virtual void read_sensorMode(Tango::Attribute &attr);
/**
 *	Write sensorMode attribute values to hardware.
 */
	virtual void write_sensorMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for pixelType acquisition result.
 */
	virtual void read_pixelType(Tango::Attribute &attr);
/**
 *	Write pixelType attribute values to hardware.
 */
	virtual void write_pixelType(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for inputTriggerActive acquisition result.
 */
	virtual void read_inputTriggerActive(Tango::Attribute &attr);
/**
 *	Write inputTriggerActive attribute values to hardware.
 */
	virtual void write_inputTriggerActive(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for inputTriggerPolarity acquisition result.
 */
	virtual void read_inputTriggerPolarity(Tango::Attribute &attr);
/**
 *	Write inputTriggerPolarity attribute values to hardware.
 */
	virtual void write_inputTriggerPolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel1OutputTriggerPolarity acquisition result.
 */
	virtual void read_channel1OutputTriggerPolarity(Tango::Attribute &attr);
/**
 *	Write channel1OutputTriggerPolarity attribute values to hardware.
 */
	virtual void write_channel1OutputTriggerPolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel2OutputTriggerPolarity acquisition result.
 */
	virtual void read_channel2OutputTriggerPolarity(Tango::Attribute &attr);
/**
 *	Write channel2OutputTriggerPolarity attribute values to hardware.
 */
	virtual void write_channel2OutputTriggerPolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel3OutputTriggerPolarity acquisition result.
 */
	virtual void read_channel3OutputTriggerPolarity(Tango::Attribute &attr);
/**
 *	Write channel3OutputTriggerPolarity attribute values to hardware.
 */
	virtual void write_channel3OutputTriggerPolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel1OutputTriggerKind acquisition result.
 */
	virtual void read_channel1OutputTriggerKind(Tango::Attribute &attr);
/**
 *	Write channel1OutputTriggerKind attribute values to hardware.
 */
	virtual void write_channel1OutputTriggerKind(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel2OutputTriggerKind acquisition result.
 */
	virtual void read_channel2OutputTriggerKind(Tango::Attribute &attr);
/**
 *	Write channel2OutputTriggerKind attribute values to hardware.
 */
	virtual void write_channel2OutputTriggerKind(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel3OutputTriggerKind acquisition result.
 */
	virtual void read_channel3OutputTriggerKind(Tango::Attribute &attr);
/**
 *	Write channel3OutputTriggerKind attribute values to hardware.
 */
	virtual void write_channel3OutputTriggerKind(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel1OutputTriggerDelay acquisition result.
 */
	virtual void read_channel1OutputTriggerDelay(Tango::Attribute &attr);
/**
 *	Write channel1OutputTriggerDelay attribute values to hardware.
 */
	virtual void write_channel1OutputTriggerDelay(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel2OutputTriggerDelay acquisition result.
 */
	virtual void read_channel2OutputTriggerDelay(Tango::Attribute &attr);
/**
 *	Write channel2OutputTriggerDelay attribute values to hardware.
 */
	virtual void write_channel2OutputTriggerDelay(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel3OutputTriggerDelay acquisition result.
 */
	virtual void read_channel3OutputTriggerDelay(Tango::Attribute &attr);
/**
 *	Write channel3OutputTriggerDelay attribute values to hardware.
 */
	virtual void write_channel3OutputTriggerDelay(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel1OutputTriggerSource acquisition result.
 */
	virtual void read_channel1OutputTriggerSource(Tango::Attribute &attr);
/**
 *	Write channel1OutputTriggerSource attribute values to hardware.
 */
	virtual void write_channel1OutputTriggerSource(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel2OutputTriggerSource acquisition result.
 */
	virtual void read_channel2OutputTriggerSource(Tango::Attribute &attr);
/**
 *	Write channel2OutputTriggerSource attribute values to hardware.
 */
	virtual void write_channel2OutputTriggerSource(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for channel3OutputTriggerSource acquisition result.
 */
	virtual void read_channel3OutputTriggerSource(Tango::Attribute &attr);
/**
 *	Write channel3OutputTriggerSource attribute values to hardware.
 */
	virtual void write_channel3OutputTriggerSource(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for lostFrames attribute.
 */
	virtual bool is_lostFrames_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fps attribute.
 */
	virtual bool is_fps_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for wViewEnabled attribute.
 */
	virtual bool is_wViewEnabled_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for topViewExposureTime attribute.
 */
	virtual bool is_topViewExposureTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for bottomViewExposureTime attribute.
 */
	virtual bool is_bottomViewExposureTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for sensorMode attribute.
 */
	virtual bool is_sensorMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for pixelType attribute.
 */
	virtual bool is_pixelType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for inputTriggerActive attribute.
 */
	virtual bool is_inputTriggerActive_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for inputTriggerPolarity attribute.
 */
	virtual bool is_inputTriggerPolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel1OutputTriggerPolarity attribute.
 */
	virtual bool is_channel1OutputTriggerPolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel2OutputTriggerPolarity attribute.
 */
	virtual bool is_channel2OutputTriggerPolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel3OutputTriggerPolarity attribute.
 */
	virtual bool is_channel3OutputTriggerPolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel1OutputTriggerKind attribute.
 */
	virtual bool is_channel1OutputTriggerKind_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel2OutputTriggerKind attribute.
 */
	virtual bool is_channel2OutputTriggerKind_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel3OutputTriggerKind attribute.
 */
	virtual bool is_channel3OutputTriggerKind_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel1OutputTriggerDelay attribute.
 */
	virtual bool is_channel1OutputTriggerDelay_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel2OutputTriggerDelay attribute.
 */
	virtual bool is_channel2OutputTriggerDelay_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel3OutputTriggerDelay attribute.
 */
	virtual bool is_channel3OutputTriggerDelay_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel1OutputTriggerSource attribute.
 */
	virtual bool is_channel1OutputTriggerSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel2OutputTriggerSource attribute.
 */
	virtual bool is_channel2OutputTriggerSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for channel3OutputTriggerSource attribute.
 */
	virtual bool is_channel3OutputTriggerSource_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for GetAllParameters command.
 */
	virtual bool is_GetAllParameters_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetParameter command.
 */
	virtual bool is_GetParameter_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetParameter command.
 */
	virtual bool is_SetParameter_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * ParameterName = value
 *	@return	
 *	@exception DevFailed
 */
	Tango::DevString	get_all_parameters();
/**
 * Return the name and value of a specific parameter
 *	@param	argin	Name of the parameter
 *	@return	
 *	@exception DevFailed
 */
	Tango::DevString	get_parameter(Tango::DevString);
/**
 * Set the value of a parameter
 *	@param	argin	First argument is the parameter's name, Second is the value
 *	@exception DevFailed
 */
	void	set_parameter(const Tango::DevVarStringArray *);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



private :
/**
 *	method:	Hamamatsu::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
    void manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	Hamamatsu::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
    void manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	Hamamatsu::create_dynamics_attributes
 *
 *	description: Create all dynamics attributes.
 */
    void create_dynamics_attributes(void);

/**
 *	method:	Hamamatsu::release_dynamics_attributes
 *
 *	description: Release all dynamics attributes.
 */
    void release_dynamics_attributes(void);

/**
 *	method:	Hamamatsu::write_at_init
 *
 *	description: Update the hardware with the properties data.
 */
    void write_at_init(void);

/**
 *	method:	Hamamatsu::create_attribute
 *
 *	description: Create a dynamic attribute
 */
	template <class F1, class F2>
    void create_dynamic_attribute(const std::string &   name                ,
                                  int                   data_type           ,
                                  Tango::AttrDataFormat data_format         ,
                                  Tango::AttrWriteType  access_type         ,
                                  Tango::DispLevel      disp_level          ,
                                  size_t                polling_period_in_ms,
                                  const std::string &   unit                ,
                                  const std::string &   format              ,
                                  const std::string &   desc                ,
                                  F1                    read_callback       ,
                                  F2                    write_callback      ,
                                  yat::Any              user_data           );

/**
 *	method:	Hamamatsu::read_dynamic_attribute
 *
 *	description: Fill a dynamic attribute with a information from the plugin
 */
    template< typename T1, typename T2>
    void read_dynamic_attribute(yat4tango::DynamicAttributeReadCallbackData& out_cbd,
                                T2 (lima::Hamamatsu::Camera::*in_method)(void),
                                const std::string & in_caller_name,
                                const bool in_is_enabled_during_running = false);

/**
 *	method:	Hamamatsu::read_dynamic_string_attribute
 *
 *	description: Fill the read dynamic attribute (string) with the plugin informations
 */
    template< typename T1, typename T2>
    void read_dynamic_string_attribute(yat4tango::DynamicAttributeReadCallbackData& out_cbd,
                                       T2 (lima::Hamamatsu::Camera::*in_method)(void),
                                       const std::string & in_caller_name,
                                       const bool in_is_enabled_during_running = false);

/**
 *	method:	Hamamatsu::write_dynamic_attribute
 *
 *	description: Use the write dynamic attribut to set informations in the plugin
 */
    template< typename T1, typename T2>
    void write_dynamic_attribute(yat4tango::DynamicAttributeWriteCallbackData & in_cbd,
                                 void (lima::Hamamatsu::Camera::*in_method)(const T2 &),
                                 const char * in_optional_memorized_property,
                                 const std::string & in_caller_name);

/**
 *	method:	Hamamatsu::write_dynamic_string_attribute
 *
 *	description: Use the write dynamic attribut (string) to set informations in the plugin
 */
    template< typename T1, typename T2>
    void write_dynamic_string_attribute(yat4tango::DynamicAttributeWriteCallbackData & in_cbd,
                                        void (lima::Hamamatsu::Camera::*in_method)(const T2 &),
                                        const char * in_optional_memorized_property,
                                        const std::string & in_caller_name);

/**
 *	method:	Hamamatsu::write_property_in_dynamic_attribute
 *
 *	description: Use to update a dynamic attribute and the hardware with a property value
 */
    template< typename T1>
    void write_property_in_dynamic_attribute(const std::string & in_attribute_name,
                                             const std::string & in_property_name ,
                                             void (Hamamatsu_ns::Hamamatsu::*in_write_method)(yat4tango::DynamicAttributeWriteCallbackData &));

/**
 *	method:	Hamamatsu::write_property_in_dynamic_string_attribute
 *
 *	description: Use to update a dynamic attribute (string) and the hardware with a property value
 */
    template< typename T1>
    void write_property_in_dynamic_string_attribute(const std::string & in_attribute_name,
                                                    const std::string & in_property_name ,
                                                    void (Hamamatsu_ns::Hamamatsu::*in_write_method)(yat4tango::DynamicAttributeWriteCallbackData &));


/**
 *	method:	Hamamatsu::read_temperature_callback
 *
 *	description: read temperature callback
 */
    void read_temperature_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::read_temperatureStatus_callback
 *
 *	description: read temperature status callback
 */
    void read_temperatureStatus_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::read_coolerMode_callback
 *
 *	description: read cooler mode callback
 */
    void read_coolerMode_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::read_coolerMode_callback
 *
 *	description: read cooler mode callback
 */
    void read_coolerStatus_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::read_highDynamicRangeEnabled_callback
 *
 *	description: read high dynamic range enabled callback
 */
    void read_highDynamicRangeEnabled_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::write_highDynamicRangeEnabled_callback
 *
 *	description: write high dynamic range enabled callback
 */
    void write_highDynamicRangeEnabled_callback(yat4tango::DynamicAttributeWriteCallbackData& cbd);

/**
 *	method:	Hamamatsu::read_readoutSpeed_callback
 *
 *	description: Extract real attribute values for readoutSpeed.
 */
    void read_readoutSpeed_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);

/**
 *	method:	Hamamatsu::write_readoutSpeed_callback
 *
 *	description: Set real attribute values for readoutSpeed.
 */
    void write_readoutSpeed_callback(yat4tango::DynamicAttributeWriteCallbackData& cbd);

    // method for tango dyn attributes WHEN no write part is available - NULL
    void write_callback_null(yat4tango::DynamicAttributeWriteCallbackData& cbd){/*nop*/}

    

protected :	
	//	Add your own data members here
	//-----------------------------------------
	bool                                                m_is_device_initialized    ;
    stringstream                                        m_status_message           ;
    enum lima::Hamamatsu::Camera::SyncReadOut_BlankMode m_sync_readout_blank_mode  ;
	double                                              m_top_view_exposure_time   ;
	double                                              m_bottom_view_exposure_time;
	bool                                                m_wView_enabled            ;
	

    /// yat4tango Dynamic Interface Manager
    yat4tango::DynamicInterfaceManager m_dim;

    /// read attributes for dynamic attributes
    Tango::DevDouble  *attr_dyn_temperature_read  ;
    Tango::DevString  *attr_dyn_coolerMode_read  ;
    Tango::DevString  *attr_dyn_coolerStatus_read;
    Tango::DevString  *attr_dyn_temperatureStatus_read;
    Tango::DevBoolean *attr_dyn_highDynamicRangeEnabled_read;
    Tango::DevString  *attr_dyn_readoutSpeed_read;

    /// lima OBJECTS
    lima::Hamamatsu::Interface * m_hw    ;
    CtControl                  * m_ct    ;
    lima::Hamamatsu::Camera    * m_camera;
	
	//ICATHALES-587
	bool                       m_raise_ex;
};

}	// namespace_ns

//	Additional Classes Definitions for templates
#include "Hamamatsu.hpp"

#endif	// _HAMAMATSU_H
