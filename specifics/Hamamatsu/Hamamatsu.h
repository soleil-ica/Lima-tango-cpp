//=============================================================================
//
// file :        Hamamatsu.h
//
// description : Include for the Hamamatsu class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _HAMAMATSU_H
#define _HAMAMATSU_H

#include <tango.h>

//- YAT/YAT4TANGO
#include <yat4tango/PropertyHelper.h>
#include <yat4tango/InnerAppender.h>

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------
#include "Factory.h"
#include "lima/HwInterface.h"
#include "lima/CtControl.h"
#include "lima/CtAcquisition.h"
#include "lima/CtImage.h"
#include "HamamatsuInterface.h"
#include "HamamatsuCamera.h"

//using namespace lima::Hamamatsu;
using namespace lima;
using namespace yat4tango;

namespace Hamamatsu_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class Hamamatsu: public TANGO_BASE_CLASS
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevString	*attr_readoutSpeed_read;
		Tango::DevString	attr_readoutSpeed_write;
		Tango::DevLong	*attr_lostFrames_read;
		Tango::DevDouble	*attr_fps_read;
		Tango::DevBoolean	*attr_wViewEnabled_read;
		Tango::DevBoolean	attr_wViewEnabled_write;
		Tango::DevDouble	*attr_topViewExposureTime_read;
		Tango::DevDouble	attr_topViewExposureTime_write;
		Tango::DevDouble	*attr_bottomViewExposureTime_read;
		Tango::DevDouble	attr_bottomViewExposureTime_write;
		Tango::DevDouble	*attr_temperature_read;
		Tango::DevString	*attr_coolerMode_read;
		Tango::DevString	*attr_coolerStatus_read;
		Tango::DevString	*attr_temperatureStatus_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	id of the camera
 */
	Tango::DevLong	detectorNum;
/**
 *	Memorize/Define the readoutSpeed attribute at Init device<br>
 *	Availables values :<br>
 *	NORMAL<br>
 *	SLOW<br>
 */
	string	memorizedReadoutSpeed;
/**
 *	Allows you to select the blank of synreadout:<BR>
 *	Availables values :<br>
 *	- STANDARD<BR>
 *	- MINIMUM<BR>
 *	
 */
	string	blankOfSyncreadoutTrigger;
/**
 *	Memorize/Define the Top View exposure time attribute at Init device<br>
 */
	Tango::DevDouble	memorizedTopViewExposureTime;
/**
 *	Memorize/Define the Bottom View exposure time attribute at Init device<br>
 */
	Tango::DevDouble	memorizedBottomViewExposureTime;
/**
 *	Memorize/Define the W-VIEW mode attribute at Init device<br>
 */
	Tango::DevBoolean	memorizedWViewEnabled;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Hamamatsu(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Hamamatsu(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Hamamatsu(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~Hamamatsu() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Hamamatsu methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for readoutSpeed acquisition result.
 */
	virtual void read_readoutSpeed(Tango::Attribute &attr);
/**
 *	Write readoutSpeed attribute values to hardware.
 */
	virtual void write_readoutSpeed(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for lostFrames acquisition result.
 */
	virtual void read_lostFrames(Tango::Attribute &attr);
/**
 *	Extract real attribute values for fps acquisition result.
 */
	virtual void read_fps(Tango::Attribute &attr);
/**
 *	Extract real attribute values for wViewEnabled acquisition result.
 */
	virtual void read_wViewEnabled(Tango::Attribute &attr);
/**
 *	Write wViewEnabled attribute values to hardware.
 */
	virtual void write_wViewEnabled(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for topViewExposureTime acquisition result.
 */
	virtual void read_topViewExposureTime(Tango::Attribute &attr);
/**
 *	Write topViewExposureTime attribute values to hardware.
 */
	virtual void write_topViewExposureTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for bottomViewExposureTime acquisition result.
 */
	virtual void read_bottomViewExposureTime(Tango::Attribute &attr);
/**
 *	Write bottomViewExposureTime attribute values to hardware.
 */
	virtual void write_bottomViewExposureTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for temperature acquisition result.
 */
	virtual void read_temperature(Tango::Attribute &attr);
/**
 *	Extract real attribute values for coolerMode acquisition result.
 */
	virtual void read_coolerMode(Tango::Attribute &attr);
/**
 *	Extract real attribute values for coolerStatus acquisition result.
 */
	virtual void read_coolerStatus(Tango::Attribute &attr);
/**
 *	Extract real attribute values for temperatureStatus acquisition result.
 */
	virtual void read_temperatureStatus(Tango::Attribute &attr);
/**
 *	Read/Write allowed for readoutSpeed attribute.
 */
	virtual bool is_readoutSpeed_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for lostFrames attribute.
 */
	virtual bool is_lostFrames_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fps attribute.
 */
	virtual bool is_fps_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for wViewEnabled attribute.
 */
	virtual bool is_wViewEnabled_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for topViewExposureTime attribute.
 */
	virtual bool is_topViewExposureTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for bottomViewExposureTime attribute.
 */
	virtual bool is_bottomViewExposureTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for temperature attribute.
 */
	virtual bool is_temperature_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for coolerMode attribute.
 */
	virtual bool is_coolerMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for coolerStatus attribute.
 */
	virtual bool is_coolerStatus_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for temperatureStatus attribute.
 */
	virtual bool is_temperatureStatus_allowed(Tango::AttReqType type);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	
private :
/**
 *	method:	Hamamatsu::manage_devfailed_exception
 *
 *	description: method which manages DevFailed exceptions
 */
    void manage_devfailed_exception(Tango::DevFailed & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	Hamamatsu::manage_lima_exception
 *
 *	description: method which manages lima exceptions
 */
    void manage_lima_exception(lima::Exception & in_exception, const std::string & in_caller_method_name);

/**
 *	method:	Hamamatsu::get_cooler_mode_label
 *
 *	description: Get a cooler mode label.
 */
    std::string get_cooler_mode_label(enum lima::Hamamatsu::Camera::Cooler_Mode in_cooler_mode);

/**
 *	method:	Hamamatsu::get_temperature_status_label
 *
 *	description: Get a temperature status label.
 */
    std::string get_temperature_status_label(enum lima::Hamamatsu::Camera::Temperature_Status in_temperature_status);

/**
 *	method:	Hamamatsu::get_cooler_status_label
 *
 *	description: Get a cooler status label.
 */
    std::string get_cooler_status_label(enum lima::Hamamatsu::Camera::Cooler_Status in_cooler_status);

protected :	
	//	Add your own data members here
	//-----------------------------------------
	bool                                                m_is_device_initialized ;
    stringstream                                        m_status_message        ;
	string				                                m_readoutSpeed          ;
    enum lima::Hamamatsu::Camera::SyncReadOut_BlankMode m_SyncreadoutBlankMode  ;
	double                                              m_TopViewExposureTime   ;
	double                                              m_BottomViewExposureTime;
	bool                                                m_wViewEnabled          ;

    //lima OBJECTS
    lima::Hamamatsu::Interface * m_hw    ;
    CtControl                  * m_ct    ;
    lima::Hamamatsu::Camera    * m_camera;
};

}	// namespace_ns

#endif	// _HAMAMATSU_H
