static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         Maxipix.cpp
//
// description :  C++ source for the Maxipix and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Maxipix are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================


#include <tango.h>
#include <helpers/PogoHelper.h>
#include <Maxipix.h>
#include <MaxipixClass.h>

namespace Maxipix_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::Maxipix(string &s)
// 
// description : 	constructor for simulated Maxipix
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
Maxipix::Maxipix(Tango::DeviceClass *cl, string &s)
:TANGO_BASE_CLASS(cl, s.c_str())
{
    init_device();
}
Maxipix::Maxipix(Tango::DeviceClass *cl, const char *s)
:TANGO_BASE_CLASS(cl, s)
{
    init_device();
}
Maxipix::Maxipix(Tango::DeviceClass *cl, const char *s, const char *d)
:TANGO_BASE_CLASS(cl, s, d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		Maxipix::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Maxipix::delete_device()
{
    DELETE_SCALAR_ATTRIBUTE(attr_energyThreshold_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_deviceVersion_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_fillMode_read);
    DELETE_SCALAR_ATTRIBUTE(attr_gate_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_gateLevel_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_readyMode_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_readyLevel_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_shutterLevel_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_triggerLevel_read);

    INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);
    //	Delete device allocated objects

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("Maxipix");
    //    m_ct = 0;
    //}    
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Maxipix::init_device()
{
    INFO_STREAM << "Maxipix::Maxipix() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------
    get_device_property();

    CREATE_SCALAR_ATTRIBUTE(attr_energyThreshold_read, 0.0);
    CREATE_DEVSTRING_ATTRIBUTE(attr_deviceVersion_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_fillMode_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_SCALAR_ATTRIBUTE(attr_gate_read, false);
    CREATE_DEVSTRING_ATTRIBUTE(attr_gateLevel_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_readyMode_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_readyLevel_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_shutterLevel_read, MAX_ATTRIBUTE_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_triggerLevel_read, MAX_ATTRIBUTE_STRING_LENGTH);

    m_is_device_initialized = false;

    set_state(Tango::INIT);
    m_status_message.str("");

    INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("Maxipix");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Maxipix::Interface*> (m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

	
	//write at init
    	{
        //write fillMode
        attr_fillMode_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "fillMode", static_cast<const char*>("RAW")));
        Tango::WAttribute &fillMode = dev_attr->get_w_attr_by_name("fillMode");
        fillMode.set_write_value(attr_fillMode_write);
        write_fillMode(fillMode);

        //write gate
        attr_gate_write = static_cast<Tango::DevBoolean>(yat4tango::PropertyHelper::get_memorized_attribute(this, "gate", false));
        Tango::WAttribute &gate = dev_attr->get_w_attr_by_name("gate");
        gate.set_write_value(attr_gate_write);
        write_gate(gate);

        //write gateLevel
        attr_gateLevel_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "gateLevel", static_cast<const char*>("LOW")));
        Tango::WAttribute &gateLevel = dev_attr->get_w_attr_by_name("gateLevel");
        gateLevel.set_write_value(attr_gateLevel_write);
        write_gateLevel(gateLevel);

        //write readyMode
        attr_readyMode_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "readyMode", static_cast<const char*>("EXPOSURE")));
        Tango::WAttribute &readyMode = dev_attr->get_w_attr_by_name("readyMode");
        readyMode.set_write_value(attr_readyMode_write);
        write_readyMode(readyMode);

        //write readyLevel
        attr_readyLevel_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "readyLevel", static_cast<const char*>("LOW")));
        Tango::WAttribute &readyLevel = dev_attr->get_w_attr_by_name("readyLevel");
        readyLevel.set_write_value(attr_readyLevel_write);
        write_readyLevel(readyLevel);

        //write shutterLevel
        attr_shutterLevel_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "shutterLevel", static_cast<const char*>("LOW")));
        Tango::WAttribute &shutterLevel = dev_attr->get_w_attr_by_name("shutterLevel");
        shutterLevel.set_write_value(attr_shutterLevel_write);
        write_shutterLevel(shutterLevel);

        //write triggerLevel
        attr_triggerLevel_write = const_cast<Tango::DevString>(yat4tango::PropertyHelper::get_memorized_attribute(this, "triggerLevel", static_cast<const char*>("LOW")));
        Tango::WAttribute &triggerLevel = dev_attr->get_w_attr_by_name("triggerLevel");
        triggerLevel.set_write_value(attr_triggerLevel_write);
        write_triggerLevel(triggerLevel);

        //write energyThreshold
        attr_energyThreshold_write = static_cast<Tango::DevDouble>(yat4tango::PropertyHelper::get_memorized_attribute(this, "energyThreshold", 1.0));
        Tango::WAttribute &energyThreshold = dev_attr->get_w_attr_by_name("energyThreshold");
        energyThreshold.set_write_value(attr_energyThreshold_write);
        write_energyThreshold(energyThreshold);

    	}



    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		Maxipix::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Maxipix::get_device_property()
{
    //	Initialize your default values here (if not done with  POGO).
    //------------------------------------------------------------------

    //	Read device properties from database.(Automatic code generation)
    //------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("EspiaDeviceNumber"));
	dev_prop.push_back(Tango::DbDatum("ConfigurationPath"));
	dev_prop.push_back(Tango::DbDatum("ConfigurationName"));
	dev_prop.push_back(Tango::DbDatum("UseReconstruction"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	MaxipixClass	*ds_class =
		(static_cast<MaxipixClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize EspiaDeviceNumber from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  espiaDeviceNumber;
	else {
		//	Try to initialize EspiaDeviceNumber from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  espiaDeviceNumber;
	}
	//	And try to extract EspiaDeviceNumber value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  espiaDeviceNumber;

	//	Try to initialize ConfigurationPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  configurationPath;
	else {
		//	Try to initialize ConfigurationPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  configurationPath;
	}
	//	And try to extract ConfigurationPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configurationPath;

	//	Try to initialize ConfigurationName from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  configurationName;
	else {
		//	Try to initialize ConfigurationName from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  configurationName;
	}
	//	And try to extract ConfigurationName value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  configurationName;

	//	Try to initialize UseReconstruction from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  useReconstruction;
	else {
		//	Try to initialize UseReconstruction from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  useReconstruction;
	}
	//	And try to extract UseReconstruction value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  useReconstruction;



    //	End of Automatic code generation
    //------------------------------------------------------------------
    PropertyHelper::create_property_if_empty(this, dev_prop, "-1", "EspiaDeviceNumber");
    PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "ConfigurationPath");
    PropertyHelper::create_property_if_empty(this, dev_prop, "TO_BE_DEFINED", "ConfigurationName");
    PropertyHelper::create_property_if_empty(this, dev_prop, "false", "UseReconstruction");

}
//+----------------------------------------------------------------------------
//
// method : 		Maxipix::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Maxipix::always_executed_hook()
{
    try
    {
        yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
        m_status_message.str("");
        //- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("Maxipix");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Maxipix::Interface*> (m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

        //update state
        dev_state();
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
}
//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Maxipix::read_attr_hardware(vector<long> &attr_list)
{
    DEBUG_STREAM << "Maxipix::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    //	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_gate
// 
// description : 	Extract real attribute values for gate acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_gate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Maxipix::read_gate(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        bool value;
        lima::Maxipix::PriamAcq::GateMode mode;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getGateMode(mode);
        }

        switch (mode)
        {
            case lima::Maxipix::PriamAcq::INACTIVE:
                value = false;
                break;
            case lima::Maxipix::PriamAcq::ACTIVE:
                value = true;
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected gate value.",
                                               "Maxipix::read_gate");
            }
        }


        *attr_gate_read = value;
        attr.set_value(attr_gate_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_gate");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_gate");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_gate
// 
// description : 	Write gate attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_gate(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_gate(Tango::WAttribute &attr) entering... "<< endl;
    try
    {

        attr.get_write_value(attr_gate_write);

        lima::Maxipix::PriamAcq::GateMode mode;
        if(attr_gate_write == false)
            mode = lima::Maxipix::PriamAcq::INACTIVE;
        else if (attr_gate_write == true)
            mode = lima::Maxipix::PriamAcq::ACTIVE;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setGateMode(mode);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_gate");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_gate");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_gateLevel
// 
// description : 	Extract real attribute values for gateLevel acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_gateLevel(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_gateLevel(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_level;
        lima::Maxipix::PriamAcq::SignalLevel level;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getGateLevel(level);
        }
        
        switch (level)
        {
            case lima::Maxipix::PriamAcq::LOW_FALL:
                str_level = "LOW";
                break;
            case lima::Maxipix::PriamAcq::HIGH_RISE:
                str_level = "HIGH";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected gateLevel value.",
                                               "Maxipix::read_gateLevel");
            }
        }


        strcpy(*attr_gateLevel_read, str_level.c_str());
        attr.set_value(attr_gateLevel_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_gateLevel");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_gateLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_gateLevel
// 
// description : 	Write gateLevel attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_gateLevel(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_gateLevel(Tango::WAttribute &attr) entering... " << endl;
    try
    {

        attr.get_write_value(attr_gateLevel_write);
        std::string str_level = attr_gateLevel_write;
        std::transform(str_level.begin(), str_level.end(), str_level.begin(), ::toupper);

        if ((str_level != "HIGH") && (str_level != "LOW"))
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong shutter Level:\n"
                                           "Possibles values are:\n"
                                           "LOW\n"
                                           "HIGH",
                                           "Maxipix::write_gateLevel");
        }

        lima::Maxipix::PriamAcq::SignalLevel level;
        if(str_level == "LOW")
            level = lima::Maxipix::PriamAcq::LOW_FALL;
        else if (str_level == "HIGH")
            level = lima::Maxipix::PriamAcq::HIGH_RISE;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setGateLevel(level);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_gateLevel");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_gateLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_readyMode
// 
// description : 	Extract real attribute values for readyMode acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_readyMode(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_readyMode(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_mode;
        lima::Maxipix::PriamAcq::ReadyMode mode;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getReadyMode(mode);
        }
        
        switch (mode)
        {
            case lima::Maxipix::PriamAcq::EXPOSURE:
                str_mode = "EXPOSURE";
                break;
            case lima::Maxipix::PriamAcq::EXPOSURE_READOUT:
                str_mode = "READOUT";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected readyMode value.",
                                               "Maxipix::read_readyMode");
            }
        }


        strcpy(*attr_readyMode_read, str_mode.c_str());
        attr.set_value(attr_readyMode_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_readyMode");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_readyMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_readyMode
// 
// description : 	Write readyMode attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_readyMode(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_readyMode(Tango::WAttribute &attr) entering... " << endl;
    try
    {

        attr.get_write_value(attr_readyMode_write);
        std::string str_mode = attr_readyMode_write;
        std::transform(str_mode.begin(), str_mode.end(), str_mode.begin(), ::toupper);

        if ((str_mode != "EXPOSURE") && (str_mode != "READOUT"))
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong ready mode:\n"
                                           "Possibles values are:\n"
                                           "EXPOSURE\n"
                                           "READOUT",
                                           "Maxipix::write_readyMode");
        }

        lima::Maxipix::PriamAcq::ReadyMode mode;
        if(str_mode == "EXPOSURE")
            mode = lima::Maxipix::PriamAcq::EXPOSURE;
        else if (str_mode == "READOUT")
            mode = lima::Maxipix::PriamAcq::EXPOSURE_READOUT;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setReadyMode(mode);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_readyMode");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_readyMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_readyLevel
// 
// description : 	Extract real attribute values for readyLevel acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_readyLevel(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_readyLevel(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_level;
        lima::Maxipix::PriamAcq::SignalLevel level;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getReadyLevel(level);
        }
        
        switch (level)
        {
            case lima::Maxipix::PriamAcq::LOW_FALL:
                str_level = "LOW";
                break;
            case lima::Maxipix::PriamAcq::HIGH_RISE:
                str_level = "HIGH";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected readyLevel value.",
                                               "Maxipix::read_readyLevel");
            }
        }


        strcpy(*attr_readyLevel_read, str_level.c_str());
        attr.set_value(attr_readyLevel_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_readyLevel");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_readyLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_readyLevel
// 
// description : 	Write readyLevel attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_readyLevel(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_readyLevel(Tango::WAttribute &attr) entering... " << endl;
    try
    {

        attr.get_write_value(attr_readyLevel_write);
        std::string str_level = attr_readyLevel_write;
        std::transform(str_level.begin(), str_level.end(), str_level.begin(), ::toupper);

        if ((str_level != "HIGH") && (str_level != "LOW"))
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong shutter Level:\n"
                                           "Possibles values are:\n"
                                           "LOW\n"
                                           "HIGH",
                                           "Maxipix::write_readyLevel");
        }

        lima::Maxipix::PriamAcq::SignalLevel level;
        if(str_level == "LOW")
            level = lima::Maxipix::PriamAcq::LOW_FALL;
        else if (str_level == "HIGH")
            level = lima::Maxipix::PriamAcq::HIGH_RISE;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setReadyLevel(level);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_readyLevel");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_readyLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_shutterLevel
// 
// description : 	Extract real attribute values for shutterLevel acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_shutterLevel(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_shutterLevel(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_level;
        lima::Maxipix::PriamAcq::SignalLevel level;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getShutterLevel(level);
        }

        switch (level)
        {
            case lima::Maxipix::PriamAcq::LOW_FALL:
                str_level = "LOW";
                break;
            case lima::Maxipix::PriamAcq::HIGH_RISE:
                str_level = "HIGH";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected shutterLevel value.",
                                               "Maxipix::read_shutterLevel");
            }
        }


        strcpy(*attr_shutterLevel_read, str_level.c_str());
        attr.set_value(attr_shutterLevel_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_shutterLevel");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_shutterLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_shutterLevel
// 
// description : 	Write shutterLevel attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_shutterLevel(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_shutterLevel(Tango::WAttribute &attr) entering... " << endl;
    try
    {

        attr.get_write_value(attr_shutterLevel_write);
        std::string str_level = attr_shutterLevel_write;
        std::transform(str_level.begin(), str_level.end(), str_level.begin(), ::toupper);

        if ((str_level != "HIGH") && (str_level != "LOW"))
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong shutter Level:\n"
                                           "Possibles values are:\n"
                                           "LOW\n"
                                           "HIGH",
                                           "Maxipix::write_shutterLevel");
        }

        lima::Maxipix::PriamAcq::SignalLevel level;
        if(str_level == "LOW")
            level = lima::Maxipix::PriamAcq::LOW_FALL;
        else if (str_level == "HIGH")
            level = lima::Maxipix::PriamAcq::HIGH_RISE;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setShutterLevel(level);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_shutterLevel");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_shutterLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_triggerLevel
// 
// description : 	Extract real attribute values for triggerLevel acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_triggerLevel(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_triggerLevel(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_level;
        lima::Maxipix::PriamAcq::SignalLevel level;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->getTriggerLevel(level);
        }

        switch (level)
        {
            case lima::Maxipix::PriamAcq::LOW_FALL:
                str_level = "LOW";
                break;
            case lima::Maxipix::PriamAcq::HIGH_RISE:
                str_level = "HIGH";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected triggerLevel value.",
                                               "Maxipix::read_triggerLevel");
            }
        }


        strcpy(*attr_triggerLevel_read, str_level.c_str());
        attr.set_value(attr_triggerLevel_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_triggerLevel");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_triggerLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_triggerLevel
// 
// description : 	Write triggerLevel attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_triggerLevel(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_triggerLevel(Tango::WAttribute &attr) entering... " << endl;
    try
    {

        attr.get_write_value(attr_triggerLevel_write);
        std::string str_level = attr_triggerLevel_write;
        std::transform(str_level.begin(), str_level.end(), str_level.begin(), ::toupper);

        if ((str_level != "HIGH") && (str_level != "LOW"))
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong trigger Mode:\n"
                                           "Possibles values are:\n"
                                           "LOW\n"
                                           "HIGH",
                                           "Maxipix::write_triggerLevel");
        }

        lima::Maxipix::PriamAcq::SignalLevel level;
        if(str_level == "LOW")
            level = lima::Maxipix::PriamAcq::LOW_FALL;
        else if (str_level == "HIGH")
            level = lima::Maxipix::PriamAcq::HIGH_RISE;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->priamAcq()->setTriggerLevel(level);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_triggerLevel");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_triggerLevel");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_fillMode
// 
// description : 	Extract real attribute values for fillMode acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_fillMode(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_fillMode(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string str_mode;
        lima::Maxipix::MaxipixReconstruction::Type mode;
        
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->getFillMode(mode);
        }

        switch (mode)
        {
            case lima::Maxipix::MaxipixReconstruction::RAW:
                str_mode = "RAW";
                break;
            case lima::Maxipix::MaxipixReconstruction::DISPATCH:
                str_mode = "DISPATCH";
                break;
            case lima::Maxipix::MaxipixReconstruction::ZERO:
                str_mode = "ZERO";
                break;
            case lima::Maxipix::MaxipixReconstruction::MEAN:
                str_mode = "MEAN";
                break;
            default:
            {
                Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                               "Unexpected fillMode value.",
                                               "Maxipix::read_fillMode");
            }
        }


        strcpy(*attr_fillMode_read, str_mode.c_str());
        attr.set_value(attr_fillMode_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_fillMode");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_fillMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_fillMode
// 
// description : 	Write fillMode attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_fillMode(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_fillMode(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_fillMode_write);
        std::string str_mode = attr_fillMode_write;
        std::transform(str_mode.begin(), str_mode.end(), str_mode.begin(), ::toupper);

        if ((str_mode != "RAW") && (str_mode != "DISPATCH") && (str_mode != "ZERO") && (str_mode != "MEAN") )
        {
            Tango::Except::throw_exception("DEVICE_ERROR",
                                           "Wrong fill Mode:\n"
                                           "Possibles values are:\n"
                                           "RAW\n"
                                           "DISPATCH\n"
                                           "ZERO\n"
                                           "MEAN",
                                           "Maxipix::write_fillMode");
        }

        lima::Maxipix::MaxipixReconstruction::Type mode;
        if(str_mode == "RAW")
            mode = lima::Maxipix::MaxipixReconstruction::RAW;
        else if (str_mode == "DISPATCH")
            mode = lima::Maxipix::MaxipixReconstruction::DISPATCH;
        else if (str_mode == "ZERO")
            mode = lima::Maxipix::MaxipixReconstruction::ZERO;
        else
            mode = lima::Maxipix::MaxipixReconstruction::MEAN;

        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->setFillMode(mode);
        }

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_fillMode");
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_fillMode");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_energyThreshold
// 
// description : 	Extract real attribute values for energyThreshold acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_energyThreshold(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_energyThreshold(Tango::Attribute &attr) entering... " << endl;
    try
    {
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->getEnergy(*attr_energyThreshold_read);
        }
        
        attr.set_value(attr_energyThreshold_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_energyThreshold");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_energyThreshold");
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Maxipix::write_energyThreshold
// 
// description : 	Write energyThreshold attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Maxipix::write_energyThreshold(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "Maxipix::write_energyThreshold(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        attr.get_write_value(attr_energyThreshold_write);
        {
            yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
            m_camera->setEnergy(attr_energyThreshold_write);
        }
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::write_energyThreshold");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       "TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::write_energyThreshold");
    }
}


//+----------------------------------------------------------------------------
//
// method : 		Maxipix::read_deviceVersion
// 
// description : 	Extract real attribute values for deviceVersion acquisition result.
//
//-----------------------------------------------------------------------------
void Maxipix::read_deviceVersion(Tango::Attribute &attr)
{
    DEBUG_STREAM << "Maxipix::read_deviceVersion(Tango::Attribute &attr) entering... " << endl;
    try
    {
        strcpy(*attr_deviceVersion_read, DEVICE_VERSION);

        attr.set_value(attr_deviceVersion_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          "TANGO_DEVICE_ERROR",
                                          string(df.errors[0].desc).c_str(),
                                          "Maxipix::read_deviceVersion");
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                       e.getErrMsg().c_str(),
                                       "Maxipix::read_deviceVersion");
    }
}


//+------------------------------------------------------------------
/**
 *    method:    Maxipix::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState Maxipix::dev_state()
{
    Tango::DevState argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "Maxipix::dev_state(): entering... !" << endl;

    //    Add your own code to control device here
    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        // state & status are retrieved from Factory, Factory is updated by Generic device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
}









}	//	namespace
