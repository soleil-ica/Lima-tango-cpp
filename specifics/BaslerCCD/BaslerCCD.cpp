static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         BaslerCCD.cpp
//
// description :  C++ source for the BaslerCCD and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                BaslerCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//          This file is generated by POGO
//    (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================
#include "tango.h"
#include <helpers/PogoHelper.h>
#include <math.h>
#include <BaslerCCD.h>
#include <BaslerCCDClass.h>


namespace BaslerCCD_ns
{

//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::BaslerCCD(string &s)
//
// description :     constructor for simulated BaslerCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------
BaslerCCD::BaslerCCD(Tango::DeviceClass *cl, string &s)
: TANGO_BASE_CLASS(cl, s.c_str())
{
    init_device();
}
BaslerCCD::BaslerCCD(Tango::DeviceClass *cl, const char *s)
: TANGO_BASE_CLASS(cl, s)
{
    init_device();
}
BaslerCCD::BaslerCCD(Tango::DeviceClass *cl, const char *s, const char *d)
: TANGO_BASE_CLASS(cl, s, d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::delete_device()
//
// description :     will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void BaslerCCD::delete_device()
{
    INFO_STREAM << "BaslerCCD::BaslerCCD() delete device " << device_name << endl;
    //    Delete device allocated objects
    DELETE_SCALAR_ATTRIBUTE(attr_frameRate_read);
    DELETE_SCALAR_ATTRIBUTE(attr_dataRate_read);
    DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);
    DELETE_SCALAR_ATTRIBUTE(attr_gain_read);
    DELETE_SCALAR_ATTRIBUTE(attr_autoGain_read);
    DELETE_SCALAR_ATTRIBUTE(attr_statisticsFailedBufferCount_read);
    DELETE_SCALAR_ATTRIBUTE(attr_packetSize_read);
    DELETE_SCALAR_ATTRIBUTE(attr_interPacketDelay_read);
    DELETE_SCALAR_ATTRIBUTE(attr_bandwidthAssigned_read);
    DELETE_SCALAR_ATTRIBUTE(attr_maxThroughput_read);
    DELETE_SCALAR_ATTRIBUTE(attr_currentThroughput_read);

    INFO_STREAM << "Remove the inner-appender." << endl;
    yat4tango::InnerAppender::release(this);
}

//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::init_device()
//
// description :     will be called at device initialization.
//
//-----------------------------------------------------------------------------
void BaslerCCD::init_device()
{
    INFO_STREAM << "BaslerCCD::BaslerCCD() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------

    get_device_property();
    CREATE_SCALAR_ATTRIBUTE(attr_frameRate_read, 0.0);
    CREATE_SCALAR_ATTRIBUTE(attr_dataRate_read, 0.0);
    CREATE_SCALAR_ATTRIBUTE(attr_temperature_read, 0.0);
    CREATE_SCALAR_ATTRIBUTE(attr_gain_read, 0.0);
    CREATE_SCALAR_ATTRIBUTE(attr_autoGain_read, false);
    CREATE_SCALAR_ATTRIBUTE(attr_statisticsFailedBufferCount_read);
    CREATE_SCALAR_ATTRIBUTE(attr_packetSize_read);
    CREATE_SCALAR_ATTRIBUTE(attr_interPacketDelay_read);
    CREATE_SCALAR_ATTRIBUTE(attr_bandwidthAssigned_read);
    CREATE_SCALAR_ATTRIBUTE(attr_maxThroughput_read);
    CREATE_SCALAR_ATTRIBUTE(attr_currentThroughput_read);

    m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");
    m_is_autogain_available = false;
    m_is_gain_available = false;

    INFO_STREAM << "Create the inner-appender in order to manage logs." << endl;  
    yat4tango::InnerAppender::initialize(this, 512);

    try
    {
        yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());

        //- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("BaslerCCD");

        //- get interface to specific camera
        m_hw = dynamic_cast<Basler::Interface*> (m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());
    }
    catch(yat::Exception& ex)
    {
        ex.dump();
        stringstream ssError;
        for (unsigned i = 0; i < ex.errors.size(); i++) ssError << ex.errors[i].desc << endl;
        Tango::Except::throw_exception("TANGO_DEVICE_ERROR", ssError.str().c_str(), "BaslerCCD::init_device");
        return;
    }
    catch (Exception& e)
    {
        ERROR_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (std::exception& e)
    {
        ERROR_STREAM << e.what();
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : Unknown exception caught." << endl;
        m_status_message << "Initialization Failed : Unknown exception caught." << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;

    //write at init, only if device is correctly initialized
    if (m_is_device_initialized)
    {

        INFO_STREAM << "Write tango hardware at Init - interPacketDelay." << endl;
        Tango::WAttribute &interPacketDelay = dev_attr->get_w_attr_by_name("interPacketDelay");
        *attr_interPacketDelay_read = memorizedInterPacketDelay;
        interPacketDelay.set_write_value(*attr_interPacketDelay_read);
        write_interPacketDelay(interPacketDelay);
        m_is_autogain_available = m_camera->isAutoGainAvailable();
        m_is_gain_available = m_camera->isGainAvailable();
        if (m_is_autogain_available)
        {
            INFO_STREAM << "Write tango hardware at Init - autoGain." << endl;
            Tango::WAttribute &autoGain = dev_attr->get_w_attr_by_name("autoGain");
            *attr_autoGain_read = memorizedAutoGain;
            autoGain.set_write_value(*attr_autoGain_read);
            write_autoGain(autoGain);
        }

        if ( (m_is_gain_available) && (!memorizedAutoGain) )
        {
            INFO_STREAM << "Write tango hardware at Init - gain." << endl;
            Tango::WAttribute &gain = dev_attr->get_w_attr_by_name("gain");
            *attr_gain_read = memorizedGain;
            gain.set_write_value(*attr_gain_read);
            write_gain(gain);
        }
    }

    set_state(Tango::STANDBY);
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::get_device_property()
//
// description :     Read the device properties from database.
//
//-----------------------------------------------------------------------------
void BaslerCCD::get_device_property()
{
    //    Initialize your default values here (if not done with  POGO).
    //------------------------------------------------------------------

    //    Read device properties from database.(Automatic code generation)
    //------------------------------------------------------------------
    Tango::DbData	dev_prop;
    dev_prop.push_back(Tango::DbDatum("DetectorIP"));
    dev_prop.push_back(Tango::DbDatum("DetectorTimeout"));
    dev_prop.push_back(Tango::DbDatum("DetectorPacketSize"));
    dev_prop.push_back(Tango::DbDatum("MemorizedInterPacketDelay"));
    dev_prop.push_back(Tango::DbDatum("MemorizedGain"));
    dev_prop.push_back(Tango::DbDatum("MemorizedAutoGain"));

    //	Call database and extract values
    //--------------------------------------------
    if (Tango::Util::instance()->_UseDb == true)
        get_db_device()->get_property(dev_prop);
    Tango::DbDatum	def_prop, cl_prop;
    BaslerCCDClass	*ds_class =
     (static_cast<BaslerCCDClass *> (get_device_class()));
    int	i = -1;

    //	Try to initialize DetectorIP from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  detectorIP;
    else
    {
        //	Try to initialize DetectorIP from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  detectorIP;
    }
    //	And try to extract DetectorIP value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  detectorIP;

    //	Try to initialize DetectorTimeout from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  detectorTimeout;
    else
    {
        //	Try to initialize DetectorTimeout from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  detectorTimeout;
    }
    //	And try to extract DetectorTimeout value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  detectorTimeout;

    //	Try to initialize DetectorPacketSize from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  detectorPacketSize;
    else
    {
        //	Try to initialize DetectorPacketSize from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  detectorPacketSize;
    }
    //	And try to extract DetectorPacketSize value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  detectorPacketSize;

    //	Try to initialize MemorizedInterPacketDelay from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  memorizedInterPacketDelay;
    else
    {
        //	Try to initialize MemorizedInterPacketDelay from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  memorizedInterPacketDelay;
    }
    //	And try to extract MemorizedInterPacketDelay value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  memorizedInterPacketDelay;

    //	Try to initialize MemorizedGain from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  memorizedGain;
    else
    {
        //	Try to initialize MemorizedGain from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  memorizedGain;
    }
    //	And try to extract MemorizedGain value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  memorizedGain;

    //	Try to initialize MemorizedAutoGain from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false)	cl_prop  >>  memorizedAutoGain;
    else
    {
        //	Try to initialize MemorizedAutoGain from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false)	def_prop  >>  memorizedAutoGain;
    }
    //	And try to extract MemorizedAutoGain value from database
    if (dev_prop[i].is_empty() == false)	dev_prop[i]  >>  memorizedAutoGain;



    //    End of Automatic code generation
    //------------------------------------------------------------------
    PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "DetectorIP");
    PropertyHelper::create_property_if_empty(this, dev_prop, "11000", "DetectorTimeout");
    PropertyHelper::create_property_if_empty(this, dev_prop, "1500", "DetectorPacketSize");
    PropertyHelper::create_property_if_empty(this, dev_prop, "0", "MemorizedGain");
    PropertyHelper::create_property_if_empty(this, dev_prop, "False", "MemorizedAutoGain");
    PropertyHelper::create_property_if_empty(this, dev_prop, "0", "MemorizedInterPacketDelay");
}


//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::always_executed_hook()
//
// description :     method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void BaslerCCD::always_executed_hook()
{
    DEBUG_STREAM << "BaslerCCD::always_executed_hook() entering... " << endl;
    try
    {
        m_status_message.str("");
        yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
        //- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("BaslerCCD");

        //- get interface to specific camera
        m_hw = dynamic_cast<Basler::Interface*> (m_ct->hwInterface());

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());

        //update state
        dev_state();
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        INFO_STREAM << "Initialization Failed : " << string(df.errors[0].desc) << endl;
        m_status_message << "Initialization Failed : " << string(df.errors[0].desc) << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }

}
//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::read_attr_hardware
//
// description :     Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_attr_hardware(vector<long> &attr_list)
{
    DEBUG_STREAM << "BaslerCCD::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    //    Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_packetSize
// 
// description : 	Extract real attribute values for packetSize acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_packetSize(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_packetSize(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getPacketSize((int&) *attr_packetSize_read);
                attr.set_value(attr_packetSize_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_packetSize" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_packetSize" );
        }
    }
}


//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_bandwidthAssigned
// 
// description : 	Extract real attribute values for bandwidthAssigned acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_bandwidthAssigned(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_bandwidthAssigned(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getBandwidthAssigned((int&) *attr_bandwidthAssigned_read);
                attr.set_value(attr_bandwidthAssigned_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_bandwidthAssign" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR", e.getErrMsg().c_str(), "BaslerCCD::read_bandwidthAssigned" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_maxThroughput
// 
// description : 	Extract real attribute values for maxThroughput acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_maxThroughput(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_maxThroughput(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getMaxThroughput((int&) *attr_maxThroughput_read);
                attr.set_value(attr_maxThroughput_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_maxThroughput" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR", e.getErrMsg().c_str(), "BaslerCCD::read_maxThroughput" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_currentThroughput
// 
// description : 	Extract real attribute values for currentThroughput acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_currentThroughput(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_currentThroughput(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getCurrentThroughput((int&) *attr_currentThroughput_read);
                attr.set_value(attr_currentThroughput_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_currentThroughput" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_currentThroughput" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_interPacketDelay
// 
// description : 	Extract real attribute values for interPacketDelay acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_interPacketDelay(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_interPacketDelay(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getInterPacketDelay((int&) *attr_interPacketDelay_read);
                attr.set_value(attr_interPacketDelay_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_interPacketDelay" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_interPacketDelay" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::write_interPacketDelay
// 
// description : 	Write interPacketDelay attribute values to hardware.
//
//-----------------------------------------------------------------------------
void BaslerCCD::write_interPacketDelay(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::write_interPacketDelay(Tango::WAttribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                attr.get_write_value(attr_interPacketDelay_write);
                m_camera->setInterPacketDelay(attr_interPacketDelay_write);
                PropertyHelper::set_property(this, "MemorizedInterPacketDelay", attr_interPacketDelay_write);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::write_interPacketDelay" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::write_interPacketDelay" );
        }
    }
}


//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_dataRate
// 
// description : 	Extract real attribute values for dataRate acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_dataRate(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_dataRate(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                double dataRate = 0.0;//in MB/s

                //get the frame rate
                double frameRate = 0.0;
                m_hw->getCamera().getFrameRate((double&) frameRate);

                //get the detector pixel depth

                HwDetInfoCtrlObj *hw_det_info;
                m_hw->getHwCtrlObj(hw_det_info);
                ImageType image_type;
                hw_det_info->getCurrImageType(image_type);
                FrameDim frame_dim;
                int pixelDepth = frame_dim.getImageTypeDepth(image_type);				

                //get the detector ROI
                Roi roi;
                m_ct->image()->getRoi(roi);

                //compute data rate in MB/s
                dataRate = frameRate * pixelDepth *(roi.getSize().getWidth() * roi.getSize().getHeight()) / (1024.0 * 1024.0);
                *attr_dataRate_read = dataRate;

                attr.set_value(attr_dataRate_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_frameRate" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_frameRate" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_statisticsFailedBufferCount
// 
// description : 	Extract real attribute values for statisticsFailedBufferCount acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_statisticsFailedBufferCount(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_statisticsFailedBufferCount(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            long count;
            if (m_camera != 0)
            {
                m_camera->getStatisticsFailedBufferCount(count);
                if(count != -1)
                    *attr_statisticsFailedBufferCount_read = (Tango::DevLong)(count);
                attr.set_value(attr_statisticsFailedBufferCount_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_statisticsFailedBufferCount");
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_statisticsFailedBufferCount" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method :         BaslerCCD::read_frameRate
//
// description :     Extract real attribute values for frameRate acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_frameRate(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_frameRate(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getFrameRate((double&) *attr_frameRate_read);
                attr.set_value(attr_frameRate_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_frameRate" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_frameRate" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_temperature
// 
// description : 	Extract real attribute values for temperature acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_temperature(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_temperature(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                m_camera->getTemperature((double&) *attr_temperature_read);
                attr.set_value(attr_temperature_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_temperature" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_temperature" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_gain
// 
// description : 	Extract real attribute values for gain acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_gain(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_gain(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                if(!m_is_gain_available)
                    return;

                double gain;
                m_camera->getGain(gain);
                *attr_gain_read = (Tango::DevDouble)(gain);
                attr.set_value(attr_gain_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(  df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_gain" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_gain" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::write_gain
// 
// description : 	Write gain attribute values to hardware.
//
//-----------------------------------------------------------------------------
void BaslerCCD::write_gain(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::write_gain(Tango::WAttribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                if(!m_is_gain_available)
                    return;

                attr.get_write_value(attr_gain_write);
                m_camera->setGain(attr_gain_write);
                PropertyHelper::set_property(this, "MemorizedGain", attr_gain_write);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                                              "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::write_gain");
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::write_gain" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::read_autoGain
// 
// description : 	Extract real attribute values for autoGain acquisition result.
//
//-----------------------------------------------------------------------------
void BaslerCCD::read_autoGain(Tango::Attribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::read_autogain_enabled(Tango::Attribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                if(!m_is_autogain_available)
                    return;

                bool bAutoGain;
                m_camera->getAutoGain(bAutoGain);
                *attr_autoGain_read = (Tango::DevBoolean)(bAutoGain);
                attr.set_value(attr_autoGain_read);
            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df, "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::read_autoGain" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception( "TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::read_autoGain" );
        }
    }
}

//+----------------------------------------------------------------------------
//
// method : 		BaslerCCD::write_autoGain
// 
// description : 	Write autoGain attribute values to hardware.
//
//-----------------------------------------------------------------------------
void BaslerCCD::write_autoGain(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "BaslerCCD::write_autogain_enabled(Tango::WAttribute &attr) entering... " << endl;
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
    if (m_ct != 0)
    {
        try
        {
            if (m_camera != 0)
            {
                if(!m_is_autogain_available)
                    return;

                attr.get_write_value(attr_autoGain_write);
                m_camera->setAutoGain(attr_autoGain_write);
                PropertyHelper::set_property(this, "MemorizedAutoGain", attr_autoGain_write);

            }
        }
        catch (Tango::DevFailed& df)
        {
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df, "TANGO_DEVICE_ERROR",
                                              string(df.errors[0].desc).c_str(),
                                              "BaslerCCD::write_autoGain" );
        }
        catch (Exception& e)
        {
            ERROR_STREAM << e.getErrMsg() << endl;
            //- throw exception
            Tango::Except::throw_exception("TANGO_DEVICE_ERROR",
                                           e.getErrMsg().c_str(),
                                           "BaslerCCD::write_autoGain" );
        }
    }
}

//+------------------------------------------------------------------
/**
 *    method:    BaslerCCD::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState BaslerCCD::dev_state()
{
    Tango::DevState argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "BaslerCCD::dev_state(): entering... !" << endl;
    //    Add your own code to control device here

    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        // state & status are retrieved from Factory, Factory is updated by Generic device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
}


}	//	namespace
